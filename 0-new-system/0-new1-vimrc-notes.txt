Also handle Windows vim and nvim if running in WSL in Windows:

=====

#!/bin/bash
set -e # Exit immediately if a command exits with a non-zero status.

# --- Configuration ---
# Define the source/master config files within your WSL filesystem
MASTER_VIMRC="./master.vimrc"       # Example: a file in the script's directory
MASTER_INIT_VIM="./master.init.vim" # Example: another file in the script's directory

# Define target files in the WSL filesystem (standard locations)
WSL_VIMRC="$HOME/.vimrc"
WSL_INIT_VIM="$HOME/.config/nvim/init.vim"

# --- Check if master files exist ---
if [ ! -f "$MASTER_VIMRC" ]; then
    echo "Error: Master Vimrc file not found at $MASTER_VIMRC. Please create it."
    exit 1
fi
if [ ! -f "$MASTER_INIT_VIM" ]; then
    echo "Error: Master Init.vim file not found at $MASTER_INIT_VIM. Please create it."
    exit 1
fi

# --- Update WSL Configs (Always do this) ---
echo "--- Updating WSL Configuration ---"

# Update .vimrc in WSL home
echo "Updating WSL Vim config: $WSL_VIMRC"
cp "$MASTER_VIMRC" "$WSL_VIMRC"

# Update init.vim in WSL for Neovim
echo "Updating WSL Neovim config: $WSL_INIT_VIM"
# Ensure the directory exists before copying
mkdir -p "$(dirname "$WSL_INIT_VIM")"
cp "$MASTER_INIT_VIM" "$WSL_INIT_VIM"

echo "WSL configurations updated."

# --- WSL Detection ---
IS_WSL=false
# Check /proc/version for common WSL identifiers
if grep -qEi "(Microsoft|WSL)" /proc/version &>/dev/null; then
    IS_WSL=true
    echo "--- Detected running in WSL ---"
fi

# --- Update Windows Configs (Only if in WSL) ---
if [ "$IS_WSL" = true ]; then
    echo "--- Attempting to update Windows Configuration ---"

    # Construct potential Windows paths
    # Assumes your WSL $USER environment variable matches your Windows username folder name
    WINDOWS_USER_DIR="/mnt/c/Users/$USER"
    WINDOWS_VIMRC_UNDERSCORE="$WINDOWS_USER_DIR/_vimrc"
    WINDOWS_VIMRC_DOT="$WINDOWS_USER_DIR/.vimrc" # Less common but possible
    WINDOWS_NVIM_DIR="$WINDOWS_USER_DIR/AppData/Local/nvim"
    WINDOWS_INIT_VIM="$WINDOWS_NVIM_DIR/init.vim"

    # Check if the Windows user directory exists before proceeding
    if [ ! -d "$WINDOWS_USER_DIR" ]; then
        echo "Warning: Windows user directory not found at '$WINDOWS_USER_DIR'. Skipping Windows updates."
        echo "If your Windows username folder is different, update the 'WINDOWS_USER_DIR' variable in the script."
    else
        echo "Found Windows user directory: $WINDOWS_USER_DIR"

        # Update Windows Vimrc (_vimrc or .vimrc)
        if [ -f "$WINDOWS_VIMRC_UNDERSCORE" ]; then
            echo "Updating Windows Vim config: $WINDOWS_VIMRC_UNDERSCORE"
            cp "$MASTER_VIMRC" "$WINDOWS_VIMRC_UNDERSCORE"
        elif [ -f "$WINDOWS_VIMRC_DOT" ]; then
             echo "Updating Windows Vim config: $WINDOWS_VIMRC_DOT"
             cp "$MASTER_VIMRC" "$WINDOWS_VIMRC_DOT"
        else
            echo "Neither '$WINDOWS_VIMRC_UNDERSCORE' nor '$WINDOWS_VIMRC_DOT' found."
            # Optionally uncomment the line below to create a new _vimrc if neither exists
            # echo "Creating new Windows Vim config: $WINDOWS_VIMRC_UNDERSCORE"
            # cp "$MASTER_VIMRC" "$WINDOWS_VIMRC_UNDERSCORE"
            echo "Skipping Windows Vim config update (file not found)."
        fi

        # Update Windows Neovim init.vim
        # Check if the Neovim directory exists first (implies Neovim is likely installed)
        if [ -d "$WINDOWS_NVIM_DIR" ]; then
            echo "Updating Windows Neovim config: $WINDOWS_INIT_VIM"
            cp "$MASTER_INIT_VIM" "$WINDOWS_INIT_VIM"
        else
            echo "Windows Neovim config directory not found at '$WINDOWS_NVIM_DIR'."
            echo "Skipping Windows Neovim config update (directory not found)."
        fi

        echo "Windows configurations update attempt finished."
    fi

else
    echo "Not running in WSL. Skipping Windows configuration updates."
fi

echo "--- Script finished ---"

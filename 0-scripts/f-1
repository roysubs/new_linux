#!/bin/bash

# f - smart find wrapper tool

show_help() {
  cat <<EOF

Find Wrapper. Usage: f [option] [path / search terms...]
  If first parameter is an existing directory, it will be used as path with
  the 'find' tool, otherwise, the path will be "." and all other terms will be
  search terms.
Options:
  f           Find files by name (default)
  d           f d str1. Find directories by name (find . -type d -name str1)
  mtime       f mtime N fld1 str1 str2. Find files modified in the last N days
  size        f size +100M str1 str2. Find files by size (e.g., +100M, -1G)
  perm        Find files by permission (e.g., 644)
  exec        Find files and execute a command (e.g., rm)
  all         Show all files under a path
  -h, --help  Show this help menu

Examples:
  f f . "*.sh" "*.py"
  f d src "*test*"
  f mtime . 7
  f "*.py" "*.ps1"     ← defaults to f f

EOF
}

resolve_path_and_terms() {
  local first="$1"
  shift

  if [[ -d "$first" ]]; then
    path="$first"
    terms=("$@")
  else
    path="."
    terms=("$first" "$@")
  fi
}

warn_if_shell_expanded_globs() {
  local args=("$@")
  local glob_like=()
  local suspicious_count=0

  for arg in "${original_args[@]}"; do
    [[ "$arg" == *"*"* || "$arg" == *"?"* || "$arg" == *"["* ]] && glob_like+=("$arg")
  done

  if [[ ${#glob_like[@]} -eq 0 ]]; then
    for arg in "${args[@]}"; do
      [[ "$arg" =~ \.py$ ]] && ((suspicious_count++))
    done
    if (( suspicious_count > 1 )); then
      echo -e "\033[1;33m💡 Note:\033[0m A glob like '*.py' was likely expanded by the shell."
      echo -e "   To avoid this, quote it like: \033[1m\"*.py\"\033[0m"
    fi
    return
  fi

  for glob in "${glob_like[@]}"; do
    for arg in "${args[@]}"; do
      if [[ "$arg" != "$glob" && "$arg" == *"${glob//\*/}"* ]]; then
        echo -e "\033[1;33m💡 Note:\033[0m \033[1m$glob\033[0m was expanded by the shell."
        echo -e "   To avoid this, quote it like: \033[1m\"$glob\"\033[0m"
        return
      fi
    done
  done
}

prepare_find() {
  resolve_path_and_terms "$@"
  warn_if_shell_expanded_globs "${terms[@]}"
}

build_expr_clause() {
  expr_parts=()
  name_terms=()
  find_flags=( -name -iname -mtime -size -perm -type -exec -user -group -regex -path -mindepth -maxdepth )

  local i=0
  while [[ $i -lt ${#terms[@]} ]]; do
    local t="${terms[i]}"

    # If term is a known find flag, take it and the next arg (if any)
    if [[ " ${find_flags[*]} " == *" $t "* ]]; then
      expr_parts+=("${terms[i]}")
      ((i+1 < ${#terms[@]})) && expr_parts+=("${terms[i+1]}")
      ((i+=2))
    else
      name_terms+=("$t")
      ((i++))
    fi
  done

  if (( ${#name_terms[@]} == 1 )); then
    expr_parts+=("-name" "${name_terms[0]}")
  elif (( ${#name_terms[@]} > 1 )); then
    expr_parts+=( "(" "-name" "${name_terms[0]}" )
    for ((i = 1; i < ${#name_terms[@]}; i++)); do
      expr_parts+=("-o" "-name" "${name_terms[i]}")
    done
    expr_parts+=( ")" )
  fi
}

run_find_name() {
  local mode="$1"
  shift

  [[ "$mode" == "f" ]] && type_flag=("-type" "f")
  [[ "$mode" == "d" ]] && type_flag=("-type" "d")

  resolve_path_and_terms "$@"
  warn_if_shell_expanded_globs "${terms[@]}"
  build_expr_clause

  local cmd=(find "$path" "${type_flag[@]}" "${expr_parts[@]}")
  printf "\033[1;33m%s\033[0m\n" "$(printf "%q " "${cmd[@]}")"
  echo "====="
  "${cmd[@]}"
}

run_mtime() {
  prepare_find "$@"
  local cmd="find \"$path\" -type f -mtime -${terms[0]}"
  echo -e "\033[1;33m$cmd\033[0m"
  echo "====="
  eval $cmd
}

run_size() {
  prepare_find "$@"
  local cmd="find \"$path\" -type f -size ${terms[0]}"
  echo -e "\033[1;33m$cmd\033[0m"
  echo "====="
  eval $cmd
}

run_perm() {
  prepare_find "$@"
  local cmd="find \"$path\" -type f -perm ${terms[0]}"
  echo -e "\033[1;33m$cmd\033[0m"
  echo "====="
  eval $cmd
}

run_exec() {
  prepare_find "$@"
  local cmd="find \"$path\" -type f -exec ${terms[*]} {} \\;"
  echo -e "\033[1;33m$cmd\033[0m"
  echo "====="
  eval $cmd
}

run_all() {
  prepare_find "$@"
  local cmd="find \"$path\""
  echo -e "\033[1;33m$cmd\033[0m"
  echo "====="
  eval $cmd
}

# Save original arguments for wildcard detection
original_args=("$@")

# Entry point with fallback to `f f`
case "$1" in
  f|d)         run_find_name "$@" ;;
  mtime)       shift; run_mtime "$@" ;;
  size)        shift; run_size "$@" ;;
  perm)        shift; run_perm "$@" ;;
  exec)        shift; run_exec "$@" ;;
  all)         shift; run_all "$@" ;;
  -h|--help|"") show_help ;;
  *)           run_find_name f "$@" ;;
esac


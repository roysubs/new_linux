#!/bin/bash

# lll - List directory sizes and counts
# Combines features of du0 and size with enhanced flags

# Default options
TARGET="."
SHOW_COUNTS=false
SHOW_ACTUAL=false
SORT_BY_NAME=false
SUMMARY_ONLY=false

# Parse arguments
for arg in "$@"; do
    case "$arg" in
        -c)
            SHOW_COUNTS=true
            ;;
        --actual)
            SHOW_ACTUAL=true
            ;;
        -name)
            SORT_BY_NAME=true
            ;;
        --here)
            SUMMARY_ONLY=true
            ;;
        -h|--help)
            echo "Usage: lll [options] [directory]"
            echo ""
            echo "Options:"
            echo "  -c         Count number of files and subdirectories"
            echo "  --actual   Use actual disk usage instead of apparent size"
            echo "  -name      Sort output by name (default is by size)"
            echo "  --here     Show only the total size/counts of the target folder"
            echo "  -h, --help Show this help message"
            exit 0
            ;;
        -*)
            echo "Unknown option: $arg"
            exit 1
            ;;
        *)
            TARGET="$arg"
            ;;
    esac
done

FULL_TARGET=$(realpath "$TARGET")

if [[ ! -d "$TARGET" ]]; then
    echo "Error: '$TARGET' is not a directory."
    exit 1
fi

TERMINAL_WIDTH=$(tput cols)

human_readable() {
    local size=$1
    if ((size < 1024)); then
        echo "${size} B"
    elif ((size < 1048576)); then
        echo "$((size / 1024)) KB"
    elif ((size < 1073741824)); then
        echo "$((size / 1048576)) MB"
    elif ((size < 1099511627776)); then
        echo "$((size / 1073741824)) GB"
    else
        echo "$((size / 1099511627776)) TB"
    fi
}

if $SUMMARY_ONLY; then
    echo "Summary for: $FULL_TARGET"
    if $SHOW_ACTUAL; then
        total=$(sudo du -sb "$TARGET" | awk '{print $1}')
    else
        total=$(find "$TARGET" -type f -exec stat --format="%s" {} + | awk '{s+=$1} END {print s}')
    fi
    human_total=$(human_readable "$total")
    if $SHOW_COUNTS; then
        num_files=$(find "$TARGET" -type f | wc -l)
        num_dirs=$(find "$TARGET" -type d | wc -l)
        num_dirs=$((num_dirs - 1))
        echo "Size: $human_total | Files: $num_files | Dirs: $num_dirs"
    else
        echo "Size: $human_total"
    fi
    exit 0
fi

START_TIME=$(date +%s)
echo "Calculating directory sizes in: $FULL_TARGET"
[[ "$SHOW_ACTUAL" == true ]] && echo "(using actual disk usage)" || echo "(using apparent size)"

declare -a entries=()
longest_name=0
total_subdir_size=0

# Initialize max_size to prevent division by zero
max_size=0

# Process each directory's size and print it along with its name
while IFS= read -r line; do
    size=$(echo "$line" | awk '{print $1}')
    dir=$(echo "$line" | awk '{print $2}')
    basename=$(basename "$dir")
    human_size=$(human_readable "$size")

    # Update max_size to be the largest size found
    max_size=$((size > max_size ? size : max_size))

    # Count files and directories if -c option is enabled
    num_files="-"
    num_dirs="-"
    if $SHOW_COUNTS; then
        num_files=$(find "$dir" -type f | wc -l)
        num_dirs=$(find "$dir" -type d | wc -l)
        num_dirs=$((num_dirs - 1))  # Exclude the dir itself
    fi

    # Align name & size output
    printf "%-*s  %8s" $((longest_name + 2)) "$basename" "$human_size"

    if $SHOW_COUNTS; then
        printf "  %8s  %8s" "$num_files" "$num_dirs"
    fi

    # Avoid division by zero if max_size is zero
    if [ "$max_size" -gt 0 ]; then
        # Generate relative size bar (scale to terminal width)
        bar_length=$((BAR_MAX_WIDTH * size / max_size))
        printf " %s\n" "$(printf '#%.0s' $(seq 1 $bar_length))"
    else
        # If no directories, just print a blank line
        printf "\n"
    fi
done <<< "$sorted_sizes"


if $SORT_BY_NAME; then
    IFS=$'\n' entries=($(printf "%s\n" "${entries[@]}" | sort -t: -k3))
else
    IFS=$'\n' entries=($(printf "%s\n" "${entries[@]}" | sort -nr -t: -k1))
fi

BAR_MAX_WIDTH=$((TERMINAL_WIDTH - longest_name - 30))
if $SHOW_COUNTS; then
    BAR_MAX_WIDTH=$((TERMINAL_WIDTH - longest_name - 50))
fi

if $SHOW_COUNTS; then
    printf "%-*s  %8s  %8s  %8s\n" $((longest_name + 2)) "Directory" "Size" "Files" "Dirs"
fi

for entry in "${entries[@]}"; do
    IFS="::" read -r size name num_files num_dirs <<< "$entry"
    human_size=$(human_readable "$size")

    printf "%-*s  %8s" $((longest_name + 2)) "$name" "$human_size"
    if $SHOW_COUNTS; then
        printf "  %8s  %8s" "$num_files" "$num_dirs"
    fi
    if (( max_size > 0 )); then
        bar_length=$((BAR_MAX_WIDTH * size / max_size))
        printf " %s\n" "$(printf '#%.0s' $(seq 1 $bar_length))"
    else
        echo ""
    fi

done

# Loose files
loose_size=$(find "$TARGET" -mindepth 1 -maxdepth 1 -type f -exec stat --format="%s" {} + | awk '{s+=$1} END {print s}')
loose_human=$(human_readable "$loose_size")
echo -e "\nLoose files total size: $loose_human"

# Overall total
overall_total=$((total_subdir_size + loose_size))
overall_human=$(human_readable "$overall_total")
echo "Total size (all subdirs + loose files): $overall_human"

END_TIME=$(date +%s)
TIME_TAKEN=$((END_TIME - START_TIME))
if (( TIME_TAKEN > 3 )); then
    echo "Time taken: $TIME_TAKEN seconds."
fi

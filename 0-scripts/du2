#!/usr/bin/env bash

# du1 - Directory size summary with readable output and optional file/dir counts

set -euo pipefail
shopt -s nullglob dotglob

DU_FLAGS=(--apparent-size -s -B1)
SHOW_COUNTS=false
SHOW_HELP=false
START_TIME=$(date +%s)
SUDO=""
SORT_BY_NAME=false
TOP_N=0
DIR="."

while [[ $# -gt 0 ]]; do
    case "$1" in
        -c) SHOW_COUNTS=true ;;
        -h) SHOW_HELP=true ;;
        -datasize) DU_FLAGS=(--block-size=1 -s -B1) ;; # Replace -actual with -datasize
        -basic) shopt -u dotglob ;; # Exclude hidden files and directories
        -name) SORT_BY_NAME=true ;;
        -sudo) SUDO="sudo" ;;
        -top)
            shift
            [[ "$1" =~ ^[0-9]+$ ]] || { echo "Invalid -top argument: $1"; exit 1; }
            TOP_N="$1"
            ;;
        -*)
            echo "Unknown option: $1"
            exit 1
            ;;
        *) DIR="$1" ;;
    esac
    shift
done

DIR=$(eval echo "$DIR")

if $SHOW_HELP; then
    cat << EOF
Usage: $(basename "$0") [OPTIONS] [DIRECTORY]

Options:
  -h        Show help
  -c        Show file and directory counts
  -datasize Show actual disk size (not apparent size)
  -basic    Ignore hidden files/directories
  -name     Sort by name instead of size
  -sudo     Use sudo for du/find
  -top N    Show only the top N directories by size

EOF
    exit 0
fi

echo "Calculating directory sizes in: $(realpath "$DIR")"
echo "(using apparent size)"

declare -A SIZES
declare -A NUM_FILES
declare -A NUM_DIRS
TOTAL_SIZE=0
LOOSE_TOTAL=0

# Collect subdirectory sizes
for d in "$DIR"/*/; do # Only consider non-hidden directories
    [[ -d "$d" && ! -L "$d" && "$(basename "$d")" != "." && "$(basename "$d")" != ".." ]] || continue
    name=$(basename "$d")
    size=$($SUDO du "${DU_FLAGS[@]}" "$d" 2>/dev/null | cut -f1)

    [[ "$size" =~ ^[0-9]+$ ]] || continue

    SIZES["$name"]=$size
    (( TOTAL_SIZE += size ))

    if $SHOW_COUNTS; then
        files=$($SUDO find "$d" -type f 2>/dev/null | wc -l)
        dirs=$($SUDO find "$d" -type d 2>/dev/null | wc -l)
        NUM_FILES["$name"]=$files
        NUM_DIRS["$name"]=$((dirs - 1))
    fi
done

# Loose file sizes (non-directories)
while IFS= read -r -d '' file; do
    size=$($SUDO du "${DU_FLAGS[@]}" "$file" 2>/dev/null | cut -f1)
    [[ "$size" =~ ^[0-9]+$ ]] || continue
    (( LOOSE_TOTAL += size ))
done < <($SUDO find "$DIR" -mindepth 1 -maxdepth 1 -type f -print0)

(( TOTAL_SIZE += LOOSE_TOTAL ))

to_human() {
    local size=$1
    if (( size < 1024 )); then
        printf "%.1f B" "$size"
    elif (( size < 1048576 )); then
        printf "%.1f KB" "$(echo "scale=1; $size/1024" | bc)"
    elif (( size < 1073741824 )); then
        printf "%.1f MB" "$(echo "scale=1; $size/1048576" | bc)"
    elif (( size < 1099511627776 )); then
        printf "%.1f GB" "$(echo "scale=1; $size/1073741824" | bc)"
    else
        printf "%.1f TB" "$(echo "scale=1; $size/1099511627776" | bc)"
    fi
}

cols=$(tput cols || echo 80)
name_pad=22
size_pad=10
extra_pad=0
$SHOW_COUNTS && extra_pad=20
bar_space=$(( cols - name_pad - size_pad - extra_pad - 4 ))
(( bar_space < 10 )) && bar_space=10

# Header
if $SHOW_COUNTS; then
    printf "\n%-*s %10s  %10s %10s  %s\n" "$name_pad" "Directory" "Size" "NumFiles" "NumDirs" ""
else
    printf "\n%-*s %10s  %s\n" "$name_pad" "Directory" "Size" ""
fi

# Sorting
if $SORT_BY_NAME; then
    mapfile -t sorted_names < <(printf "%s\n" "${!SIZES[@]}" | sort)
else
    mapfile -t sorted_names < <(
        for k in "${!SIZES[@]}"; do
            echo "$k ${SIZES[$k]}"
        done | sort -k2 -nr | awk '{print $1}'
    )
fi

# Apply -top N if needed
if (( TOP_N > 0 && ${#sorted_names[@]} > TOP_N )); then
    sorted_names=("${sorted_names[@]:0:TOP_N}")
fi

# Output
for name in "${sorted_names[@]}"; do
    size="${SIZES[$name]}"
    barlen=$(( size * bar_space / TOTAL_SIZE ))
    bar=$(printf "%-${barlen}s" "#" | tr ' ' '#')
    hsize=$(to_human "$size")

    if $SHOW_COUNTS; then
        printf "%-*s %10s  %10s %10s  %s\n" "$name_pad" "$name" "$hsize" "${NUM_FILES[$name]:-0}" "${NUM_DIRS[$name]:-0}" "$bar"
    else
        printf "%-*s %10s  %s\n" "$name_pad" "$name" "$hsize" "$bar"
    fi
done

echo
printf "Loose files total size: %s\n" "$(to_human "$LOOSE_TOTAL")"
printf "Total size (all subdirs + loose files): %s\n" "$(to_human "$TOTAL_SIZE")"

END_TIME=$(date +%s)
RUN_TIME=$(( END_TIME - START_TIME ))
if (( RUN_TIME > 10 )); then
    echo "Script ran for $RUN_TIME seconds"
fi


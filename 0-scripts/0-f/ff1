#!/bin/bash

# Show usage if no arguments or -h is passed
if [[ -z "$1" || "$1" == "-h" ]]; then
    echo "Usage: ff <command> [num] [directory]"
    echo "Commands:"
    echo "  big      - Find the largest files"
    echo "  old      - Find the oldest files"
    echo "  recent   - Find the most recently modified files"
    echo "  unused   - Find files not accessed in a long time"
    echo "  huge     - Find files larger than a given size"
    echo "  corrupt  - Find potentially corrupted files"
    echo "  perm     - Find files with specific permissions"
    echo "  owner    - Find files owned by a specific user"
    echo "  ext      - Find files with a specific extension"
    echo "Options:"
    echo "  num       - (optional) Number of results to display (default: 20)"
    echo "  directory - (optional) Target directory (default: current directory)"
    echo "  -s        - (optional) Use sudo for find command"
    exit 1
fi

# Default values
cmd="$1"
num=20
dir="."
use_sudo=""

# Shift command
shift

# Check for -s flag
if [[ "$1" == "-s" ]]; then
    use_sudo="sudo"
    shift
fi

# Function to check if a value is a positive integer
is_number() {
    [[ "$1" =~ ^[0-9]+$ ]]
}

# Handle 'owner' command separately
if [[ "$cmd" == "owner" ]]; then
    if [[ -z "$1" ]]; then
        echo "Error: Username required for 'owner' command."
        exit 1
    fi
    owner="$1"
    shift
    
    # Handle optional num and directory
    if [[ -n "$1" ]] && is_number "$1"; then
        num="$1"
        shift
    fi
    if [[ -n "$1" && -d "$1" ]]; then
        dir="$1"
    fi
    
    find_cmd="$use_sudo find \"$dir\" -xdev -type f -user \"$owner\" | head -n \"$num\""
else
    # Handle all other commands
    if [[ -n "$1" ]] && is_number "$1"; then
        num="$1"
        shift
    fi
    if [[ -n "$1" && -d "$1" ]]; then
        dir="$1"
    fi

    case "$cmd" in
        big) find_cmd="$use_sudo find \"$dir\" -xdev -type f -printf '%s %p\n' | sort -nr | head -n \"$num\"" ;;
        old) find_cmd="$use_sudo find \"$dir\" -xdev -type f -printf '%T@ %p\n' | sort -n | head -n \"$num\"" ;;
        recent) find_cmd="$use_sudo find \"$dir\" -xdev -type f -printf '%T@ %p\n' | sort -nr | head -n \"$num\"" ;;
        unused) find_cmd="$use_sudo find \"$dir\" -xdev -type f -atime +30 -printf '%T@ %p\n' | sort -n | head -n \"$num\"" ;;
        huge) [[ -z "$1" ]] && { echo "Error: Size required for 'huge' command."; exit 1; }
              find_cmd="$use_sudo find \"$dir\" -xdev -type f -size +\"$1\" -print | head -n \"$num\"" ;;
        corrupt) find_cmd="$use_sudo find \"$dir\" -xdev -type f \( -empty -o -size 0 \) -print | head -n \"$num\"" ;;
        perm) [[ -z "$1" ]] && { echo "Error: Permission required for 'perm' command."; exit 1; }
              find_cmd="$use_sudo find \"$dir\" -xdev -type f -perm \"$1\" -print | head -n \"$num\"" ;;
        ext) [[ -z "$1" ]] && { echo "Error: Extension required for 'ext' command."; exit 1; }
             find_cmd="$use_sudo find \"$dir\" -xdev -type f -name '*.$1' -print | head -n \"$num\"" ;;
        *) echo "Error: Unknown command '$cmd'. Use -h for help."; exit 1 ;;
    esac
fi

# Display and execute command
echo "Executing: $find_cmd"
eval "$find_cmd"


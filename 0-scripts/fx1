#!/bin/bash
# Find Utility Script
# Provides a set of common find operations with an easier-to-use interface.

BLUE="\e[34m"
GREEN="\e[32m"
RED="\e[31m"
YELLOW="\e[33m"
RESET="\e[0m"

# Default to not showing the command
show_command=false

# Default path if not specified
path="."

# Check if any arguments are provided
if [ $# -eq 0 ]; then
    echo "Find Utility. Usage: f [option <modifier>] <path> <pattern(s)>
  If an option takes a modifier, that must be directly after the option
  Then a (single) path argument (optional, will default to \".\")
  Then search patterns (multiple, but also optional).
  e.g. f td 3 \"*.py\" \"*.sh\"
Options:
  fc           Files Common (find files in common directories, searched in /etc, /usr, /opt, /var, ~)
  dc           Dirs Common (find directories in common locations, searched in /etc, /usr, /opt, /var, ~)
  td <days>    Find files modified in the last X days
  th <hours>   Find files modified in the last X hours
  tm <minutes> Find files modified in the last X minutes
  ge <sizeMB>  Greater than or equal to size in MB
  le <sizeMB>  Less than or equal to size in MB
  be <s1-s2>   Between or equal to (>s1 and <s2) in MB
  exe          Find executable files
  sym          Find symbolic links
  empty        Find empty files and directories under path
  me           Find files owned by the current user under path
  ext <ext>    Find files by extension, e.g., f ext py
  docs         Find document types under path (e.g., pdf, doc, txt, log)
  common       Find common file types (e.g., conf, sh, txt, log, md)
  s            Show file sizes with stat
  p            Show file permissions with stat
  sp           Show size, then permissions, then name
  ps           Show permissions, then size, then name
"
    exit 0
fi

# Parse options and arguments
option=$1
shift

# Check for -cmd switch and set flag
for arg in "$@"; do
    if [ "$arg" == "-cmd" ]; then
        show_command=true
        break
    fi
done

# Remove the -cmd from the arguments
args=()
for arg in "$@"; do
    if [ "$arg" != "-cmd" ]; then
        args+=("$arg")
    fi
done

# Default path to current directory if not specified
path="${args[0]:-.}"

# Function to check if a directory exists
check_directory_exists() {
    if [ ! -d "$1" ]; then
        echo "Error: Directory $1 does not exist."
        exit 1
    fi
}

# Function to build the name condition for find
build_name_condition() {
    local patterns=("$@")
    if [ ${#patterns[@]} -eq 0 ]; then
        echo ""
    else
        condition="\\( "
        for pattern in "${patterns[@]}"; do
            condition+="-name \"$pattern\" -o "
        done
        condition="${condition% -o }"
        condition+=" \\)"
        echo "$condition"
    fi
}

# Function to handle a named find command
run_find_named() {
    find_cmd="sudo find $@"
    if [ "$show_command" = true ]; then
        echo -e "${BLUE}$find_cmd${RESET}"
    else
        eval $find_cmd
    fi
}

# Function to handle passthrough find commands
run_find_passthrough() {
    local args=("$@")

    # Quote patterns properly
    for i in "${!args[@]}"; do
        if [[ "${args[$i]}" == *\** ]]; then
            args[$i]='"'"${args[$i]}"'"'
        fi
    done

    find_cmd="find ${args[@]}"
    if [ "$show_command" = true ]; then
        echo -e "${BLUE}$find_cmd${RESET}"
    else
        eval $find_cmd
    fi
}

# Function to convert a time in seconds to human-readable format
convert_to_human_readable() {
    echo $(date -d@$1)
}

# Main logic for each option
case "$option" in
    fc)
        check_directory_exists "$path"
        run_find_named "/etc /usr /opt /var ~ -type f $(build_name_condition "${args[@]}")"
        ;;
    dc)
        check_directory_exists "$path"
        run_find_named "/etc /usr /opt /var ~ -type d $(build_name_condition "${args[@]}")"
        ;;
    td)
        # Time-days: find files modified in the last X days
        name_condition=$(build_name_condition "${args[@]:2}")
        run_find_named "$path -type f -mtime -${args[0]} $name_condition"
        ;;
    th)
        # Time-hours: find files modified in the last X hours
        name_condition=$(build_name_condition "${args[@]:2}")
        run_find_named "$path -type f -mmin -$((args[0] * 60)) $name_condition"
        ;;
    tm)
        # Time-minutes: find files modified in the last X minutes
        name_condition=$(build_name_condition "${args[@]:2}")
        run_find_named "$path -type f -mmin -${args[0]} $name_condition"
        ;;
    ge)
        # Greater than or equal to size, e.g., 100M, 1G
        name_condition=$(build_name_condition "${args[@]:2}")
        size=${args[1]}
        # Ensure the size has the correct unit (M, G, etc.)
        if [[ ! "$size" =~ [0-9]+[A-Za-z] ]]; then
            size="${size}c"  # Default to bytes if no unit is provided
        fi
        run_find_named "$path -type f -size +${size} $name_condition"
        ;;
    le)
        # Less than or equal to size, e.g., 100M, 1G
        name_condition=$(build_name_condition "${args[@]:2}")
        run_find_named "$path -type f -size -${args[1]} $name_condition"
        ;;
    be)
        range="${args[1]}"
    
        if [[ "$range" =~ ^([0-9]+)-([0-9]+)$ ]]; then
            min_mb="${BASH_REMATCH[1]}"
            max_mb="${BASH_REMATCH[2]}"
    
            if (( min_mb > max_mb )); then
                echo "Error: Minimum value cannot be greater than maximum."
                exit 1
            fi
    
            min="+${min_mb}M"
            max="-${max_mb}M"
    
            name_condition=$(build_name_condition "${args[@]:2}")
            run_find_named "$path -type f -size $min -size $max $name_condition"
        else
            echo "Error: Invalid range format. Use: f be 100-300"
            exit 1
        fi
        ;;

    ext)
        # Find by file extension
        ext="${args[0]}"
        if [[ "$ext" != .* ]]; then
            ext=".$ext"
        fi
        run_find_named "$path -type f -name \"*${ext}\""
        ;;
    exe)
        name_condition=$(build_name_condition "${args[@]}")
        run_find_named "$path -type f -executable $name_condition"
        ;;
    sym)
        name_condition=$(build_name_condition "${args[@]}")
        run_find_named "$path -type l $name_condition"
        ;;
    empty)
        name_condition=$(build_name_condition "${args[@]}")
        run_find_named "$path -type f -empty -o -type d -empty $name_condition"
        ;;
    me)
        name_condition=$(build_name_condition "${args[@]}")
        run_find_named "$path -type f -user $(whoami) $name_condition"
        ;;
    docs)
        name_condition=$(build_name_condition "${args[@]}")
        run_find_named "$path -type f \( -name \"*.pdf\" -o -name \"*.doc\" -o -name \"*.txt\" -o -name \"*.log\" \) $name_condition"
        ;;
    common)
        name_condition=$(build_name_condition "${args[@]}")
        run_find_named "$path -type f \( -name \"*.conf\" -o -name \"*.sh\" -o -name \"*.txt\" -o -name \"*.log\" -o -name \"*.md\" \) $name_condition"
        ;;
    s)
        name_condition=$(build_name_condition "${args[@]}")
        run_find_named "$path $name_condition -exec stat --format=\"%s %n\" {} \;"
        ;;
    p)
        name_condition=$(build_name_condition "${args[@]}")
        run_find_named "$path $name_condition -exec stat --format=\"%A %n\" {} \;"
        ;;
    sp)
        name_condition=$(build_name_condition "${args[@]}")
        run_find_named "$path $name_condition -exec stat --format=\"%s %A %n\" {} \;"
        ;;
    ps)
        name_condition=$(build_name_condition "${args[@]}")
        run_find_named "$path $name_condition -exec stat --format=\"%A %s %n\" {} \;"
        ;;
    *)
        # Handle passthrough for unknown options
        run_find_passthrough "$option" "${args[@]}"
        ;;
esac


#!/usr/bin/env bash

# Show usage help
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    echo "Usage: du0 [path] [-actual] [-name] [-c]"
    echo ""
    echo "Options:"
    echo "  path      Optional. Directory to scan (default is current dir)."
    echo "  -actual   Use actual disk usage (block size)."
    echo "  -name     Sort by name instead of size."
    echo "  -c        Show number of files and directories in each folder."
    echo "  -h        Show this help."
    exit 0
fi

# --- Parse arguments ---
SHOW_COUNTS=0
SORT_BY_NAME=0
USE_ACTUAL=0

# First positional arg can be a path
DIR="."
if [[ -n "$1" && "$1" != "-"* ]]; then
    DIR="$1"
    shift
fi

while [[ $# -gt 0 ]]; do
    case "$1" in
        -actual) USE_ACTUAL=1 ;;
        -name)   SORT_BY_NAME=1 ;;
        -c)      SHOW_COUNTS=1 ;;
        *) echo "Unknown option: $1"; exit 1 ;;
    esac
    shift
done

DIR=$(realpath "$DIR")
echo "Calculating directory sizes in: $DIR"
[[ "$USE_ACTUAL" -eq 1 ]] && echo "(using actual disk usage)" || echo "(using apparent size)"

# Set flags for du
DU_FLAGS=(--max-depth=1 --block-size=1)
[[ "$USE_ACTUAL" -eq 0 ]] && DU_FLAGS+=(--apparent-size)

# Get width of terminal for bar scaling
TERMWIDTH=$(tput cols)
LABELWIDTH=30
BARSPACE=$((TERMWIDTH - LABELWIDTH - 10))

# Collect folder info
mapfile -t ENTRIES < <(
    for d in "$DIR"/*/; do
        [[ -d "$d" ]] || continue
        du "${DU_FLAGS[@]}" "$d"
    done | sort -n
)

# Extract sizes and names
declare -a DIRS SIZES COUNTS
MAXSIZE=0
for entry in "${ENTRIES[@]}"; do
    size=$(awk '{print $1}' <<< "$entry")
    name=$(cut -f2- <<< "$entry")
    base=$(basename "$name")
    DIRS+=("$base")
    SIZES+=("$size")
    (( size > MAXSIZE )) && MAXSIZE=$size

    if [[ "$SHOW_COUNTS" -eq 1 ]]; then
        num_dirs=$(find "$name" -type d | wc -l)
        num_files=$(find "$name" -type f | wc -l)
        COUNTS+=("$num_files $num_dirs")
    fi
done

# Sorting
if [[ "$SORT_BY_NAME" -eq 1 ]]; then
    IFS=$'\n' read -rd '' -a IDX <<< "$(for i in "${!DIRS[@]}"; do echo "$i:${DIRS[$i]}"; done | sort -t: -k2 | cut -d: -f1)"
else
    IFS=$'\n' read -rd '' -a IDX <<< "$(for i in "${!SIZES[@]}"; do echo "$i:${SIZES[$i]}"; done | sort -t: -k2 -n | cut -d: -f1)"
fi

# Display header
if [[ "$SHOW_COUNTS" -eq 1 ]]; then
    printf "%-30s %8s %10s %10s\n" "Directory" "Size" "NumFiles" "NumDirs"
else
    printf "%-30s %8s\n" "Directory" "Size"
fi

# Print rows
for i in "${IDX[@]}"; do
    size="${SIZES[$i]}"
    name="${DIRS[$i]}"
    human=$(numfmt --to=iec --suffix=B <<< "$size")
    barlen=$((size * BARSPACE / MAXSIZE))
    bar=$(head -c "$barlen" < /dev/zero | tr '\0' '#')

    if [[ "$SHOW_COUNTS" -eq 1 ]]; then
        read -r num_files num_dirs <<< "${COUNTS[$i]}"
        printf "%-30s %8s %10s %10s %s\n" "$name" "$human" "$num_files" "$num_dirs" "$bar"
    else
        printf "%-30s %8s %s\n" "$name" "$human" "$bar"
    fi
done

# --- Loose files ---
loose_total=0
loose_files=()
while IFS= read -r -d '' f; do
    size=$(stat --format=%s "$f" 2>/dev/null)
    [[ -n "$size" ]] && loose_total=$((loose_total + size))
done < <(find "$DIR" -mindepth 1 -maxdepth 1 -type f -print0)

loose_human=$(numfmt --to=iec --suffix=B <<< "$loose_total")
echo -e "\nLoose files total size: $loose_human"

# --- Total size (folders + files) ---
grand_total=$loose_total
for sz in "${SIZES[@]}"; do
    grand_total=$((grand_total + sz))
done

grand_human=$(numfmt --to=iec --suffix=B <<< "$grand_total")
echo "Total size (all subdirs + loose files): $grand_human"


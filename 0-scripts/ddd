#!/bin/bash
# defshow: Get definitions of functions / aliases / built-ins / external scripts that match $1

if [ -z "$1" ]; then
    declare -F
    printf "\nAll defined functions ('declare -F').\n"
    printf "'def <name>' to show function definition, alias, built-in, or script.\n\n"
    exit 0
fi

# Check if batcat is available
BAT="cat"
if command -v batcat >/dev/null 2>&1; then
    BAT="batcat -pp -l bash"
fi

# Function to display information with coloring
highlight() {
    echo -e "\033[0;31m$1\033[0m"
}

# Check precedence: Functions -> Aliases -> Built-ins -> Scripts
OVERLAPS=()

# Check if it's a function
if declare -F "$1" >/dev/null 2>&1; then
    echo "Function '$1':"
    declare -f "$1" | $BAT
    OVERLAPS+=("Function")
fi

# Check if it's an alias
if alias "$1" >/dev/null 2>&1; then
    echo "Alias '$1':"
    alias "$1" | $BAT
    OVERLAPS+=("Alias")
fi

# Check if it's a built-in command
if type -t "$1" | grep -q "builtin"; then
    echo "Built-in Command '$1':"
    help "$1" | $BAT
    OVERLAPS+=("Built-in")
fi

# Check if it's an external script
if command -v "$1" >/dev/null 2>&1; then
    SCRIPT_PATH=$(command -v "$1")
    if [[ -f "$SCRIPT_PATH" ]]; then
        echo "Script '$1' at '$SCRIPT_PATH':"
        $BAT "$SCRIPT_PATH"
        OVERLAPS+=("Script")
    fi
fi

# Display overlaps
if [ ${#OVERLAPS[@]} -gt 1 ]; then
    highlight "Note: '$1' is a ${OVERLAPS[*]}."
fi

# If no matches were found
if [ ${#OVERLAPS[@]} -eq 0 ]; then
    echo "No function, alias, built-in, or script found for '$1'."
fi

# Precedence Hierarchy:
# Shell Functions – Functions defined in the shell take precedence.
# Aliases – Aliases are expanded after functions.
# Built-in Commands – Commands built into the shell (e.g., cd, echo).
# External Commands/Files (Scripts) – These are found in the directories listed in your $PATH.


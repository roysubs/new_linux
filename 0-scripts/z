#!/bin/bash
# Zip Tool Script
# Provides utilities for zipping, unzipping, and compressing files and folders.

show_help() {
    echo "Zip Tool.   Usage: z [option] <file(s)>"
    echo "Options:"
    echo "  a  <zipfile> <file(s)>       Add files to an archive (7z preferred, gzip fallback)"
    echo "  an <zipfile> <file(s)>       Add files, no recursion, ignore all subdirectories"
    echo "  ar <zipfile> <file(s)>       Add files, recurse into subfolders if selected"
    echo "  x  <zipfile>                 Extract an archive to a folder named after the zip file"
    echo "  i  <zipfile>                 Show info about an archive (size, number of files)"
    echo "  g  <file(s)>                 Gzip compress files individually into .gz files"
    echo "  gu <file(s)>                 Gunzip decompress .gz files back to original"
    echo "  tg <zipfile> <file(s)>       Create a tarball (.tar.gz) from files/folders"
    echo "  un <archivefile>             Extract a .tar, .tar.gz, or .tar.xz file"
    echo "  help                         Show this help message"
    echo ""
}

run_command() {
    echo -e "\033[1;34m$@\033[0m"
    "$@"
}

# Check if 7z is available
if command -v 7z > /dev/null 2>&1; then
    COMPRESS_CMD="7z"
    EXT="7z"
else
    COMPRESS_CMD="gzip"
    EXT="gz"
fi

if [ $# -eq 0 ]; then
    show_help
    exit 0
fi

option=$1
shift  # Shift to access file arguments

case "$option" in
    a|ar|an)
        if [ $# -lt 2 ]; then
            echo "Error: Provide a zipfile followed by files to add."
            exit 1
        fi
        zipfile=$1
        shift

        if [ "$option" == "ar" ]; then
            run_command $COMPRESS_CMD a "$zipfile.$EXT" "$@"
        elif [ "$option" == "an" ]; then
            files_to_add=()
            for file in "$@"; do
                [ -f "$file" ] && files_to_add+=("$file")
            done
            run_command $COMPRESS_CMD a "$zipfile.$EXT" "${files_to_add[@]}"
        else
            run_command $COMPRESS_CMD a "$zipfile.$EXT" "$@"
        fi
        ;;
    x)
        if [ $# -ne 1 ]; then
            echo "Usage: z x <archive>"
            exit 1
        fi

        archive="$1"
        name="$(basename "$archive")"
        base="${name%%.*}"
        outdir="${base}_extracted"

        run_command mkdir -p "$outdir"

        filetype=$(file -b "$archive")

        case "$filetype" in
            *gzip\ compressed*)
                echo "Detected gzip-compressed file"
                run_command 7z e "$archive" -o"$outdir"
                tarfile=$(find "$outdir" -maxdepth 1 -name '*.tar' | head -n 1)
                if [ -n "$tarfile" ]; then
                    run_command 7z x "$tarfile" -o"$outdir"
                    run_command rm "$tarfile"
                fi
                ;;
            *bzip2\ compressed*)
                echo "Detected bzip2-compressed file"
                run_command 7z e "$archive" -o"$outdir"
                tarfile=$(find "$outdir" -maxdepth 1 -name '*.tar' | head -n 1)
                if [ -n "$tarfile" ]; then
                    run_command 7z x "$tarfile" -o"$outdir"
                    run_command rm "$tarfile"
                fi
                ;;
            *XZ\ compressed*)
                echo "Detected xz-compressed file"
                run_command 7z e "$archive" -o"$outdir"
                tarfile=$(find "$outdir" -maxdepth 1 -name '*.tar' | head -n 1)
                if [ -n "$tarfile" ]; then
                    run_command 7z x "$tarfile" -o"$outdir"
                    run_command rm "$tarfile"
                fi
                ;;
            *tar\ archive*)
                echo "Detected tar archive"
                run_command 7z x "$archive" -o"$outdir"
                ;;
            *Zip\ archive*|*7-zip\ archive*|*RAR\ archive*)
                echo "Detected common archive type"
                run_command 7z x "$archive" -o"$outdir"
                ;;
            *)
                echo "Error: Unknown or unsupported archive format: $filetype"
                exit 1
                ;;
        esac
        ;;
    i)
        if [ $# -ne 1 ]; then
            echo "Error: Provide a zipfile to show info."
            exit 1
        fi
        zipfile=$1
        run_command $COMPRESS_CMD l "$zipfile"
        ;;
    g)
        if [ $# -lt 1 ]; then
            echo "Error: Provide files to compress."
            exit 1
        fi
        for file in "$@"; do
            [ -f "$file" ] && run_command gzip "$file"
        done
        ;;
    gu)
        if [ $# -lt 1 ]; then
            echo "Error: Provide .gz files to decompress."
            exit 1
        fi
        for file in "$@"; do
            [[ "$file" == *.gz ]] && [ -f "$file" ] && run_command gunzip "$file"
        done
        ;;
    tg)
        if [ $# -lt 2 ]; then
            echo "Error: Provide a tarball filename and at least one file."
            exit 1
        fi
        tarfile=$1
        shift
        run_command tar -czf "$tarfile.tar.gz" "$@"
        ;;
    un)
        if [ $# -ne 1 ]; then
            echo "Error: Provide a tar archive to extract."
            exit 1
        fi
        archivefile=$1
        run_command tar -xaf "$archivefile"
        ;;
    help)
        show_help
        ;;
    *)
        echo "Invalid option. Use 'z' without arguments to see usage."
        ;;
esac


#!/bin/bash
# Apt Tool Script
# Provides utilities for apt package management with concise history and detailed info.

# Define colors
RED='\e[31m'
GREEN='\e[32m'
NC='\e[0m' # No Color

# Function to show usage help
show_help() {
    echo "Apt Tool.   Usage: a [option] <package(s)>"
    echo "Options:"
    echo "  i <package(s)>    Install the specified package(s) (uses sudo)"
    echo "  h                 History: show install/remove/upgrade history"
    echo "  r <package(s)>    Remove the specified package(s) (uses sudo)"
    echo "  s <package(s)>    Search for the specified package(s)"
    echo "  u                 Update, then upgrade, then autoremove (uses sudo)"
    echo "  ar                Autoremove packages that are no longer required (uses sudo)"
    echo "  v <package(s)>    View info: version, dependencies, package contents, etc"
    echo "  d <package(s)>    Depends: Packages required to install the specified package(s)"
    echo "  dr <package(s)>   Reverse Depends: Packages that depend on the specified package(s)"
    echo
}

# Function to print a command in green and execute it
run_command() {
    local full_cmd_string="$1"
    echo -e "# ${GREEN}${full_cmd_string}${NC}"
    # Execute the command string. Using bash -c is generally safe for constructed strings.
    bash -c "$full_cmd_string"
    return $? # Return the exit status of the executed command
}

# Show help if no arguments are provided
if [ $# -eq 0 ]; then
    show_help
    exit 0
fi

option=$1
shift  # Shift to access package arguments

case "$option" in
    i)
        run_command "sudo apt install $@";
        ;;
    h)
        # History command is complex pipeline, no simple command to print via run_command
        zgrep -E '^(Start-Date|Commandline:.*(install|remove|upgrade))' /var/log/apt/history.log.1.gz |
            sed -n '/^Start-Date/{h;n;s/^Commandline: //;H;x;s/\n/ /;p}' |
            sed -E 's|Start-Date: ||;s|/usr/bin/apt ||' |
            grep --color=auto -v 'Start-Date:'
        ;;
    r)
        run_command "sudo apt remove $@";
        ;;
    s)
        for package in "$@"; do
            echo "Search results for $package:"
            run_command "apt search $package";
            echo
        done
        ;;
    u)
        # Use run_command and check exit status for chaining
        if run_command "sudo apt update"; then
            if run_command "sudo apt upgrade"; then
                run_command "sudo apt autoremove"
            fi
        fi
        ;;
    ar)
        run_command "sudo apt autoremove";
        ;;
    v)
        for package in "$@"; do
            echo "Information for '$package' (apt info in Debian, apt show in Mint):"
            local info_cmd # Define local variable for the command string
            if grep --color=auto -q "Mint" /etc/os-release; then
                info_cmd="apt show $package";
            else
                info_cmd="apt info $package";
            fi
            run_command "$info_cmd";

            echo
            read -n 1 -s -r -p "Press any key to show package dependencies for $package"
            echo
            run_command "apt-cache depends $package";

            echo
            read -n 1 -s -r -p "Press any key to show package contents for $package"
            echo

            if dpkg -s "$package" > /dev/null 2>&1; then
                run_command "dpkg -L $package";
            else
                if ! command -v apt-file > /dev/null 2>&1; then
                    echo "Installing 'apt-file' to view contents of packages that are not currently installed."
                    run_command "sudo apt install -y apt-file"; # Use run_command here too
                    run_command "sudo apt-file update";      # Use run_command here too
                fi
                run_command "apt-file list $package";
            fi
            echo
        done
        ;;
    d)
        for package in "$@"; do
            echo "dependencies for $package:"
            run_command "apt-cache depends $package";
            echo
        done
        ;;
    dr)
         for package in "$@"; do
            echo "reverse dependencies for $package:"
            run_command "apt-cache rdepends $package";
            echo
        done
        ;;
    *)
        echo -e "${RED}Unknown option: $option${NC}\n"
        show_help
        exit 1 # Indicate error
        ;;
esac

exit 0 # Indicate success

#!/bin/bash

# f - Enhanced Find Script
# A wrapper for the find command with common operations pre-configured

# ANSI color codes
GREEN='\033[0;32m'
NC='\033[0m' # No Color
WHITE='\033[1;37m'

usage() {
    echo "Usage: f [OPTIONS] [PATH] [ARGUMENTS]"
    echo
    echo "Enhanced find utility with common operations"
    echo
    echo "Options:"
    echo "  h, help              Show this help message"
    echo "  ex, examples         Show various find syntax examples"
    echo "  b, biggest [N]       Find N biggest files (default: 10)"
    echo "  n, newest [N]        Find N newest files (default: 10)"
    echo "  o, oldest [N]        Find N oldest files (default: 10)"
    echo "  e, empty             Find empty files"
    echo "  ed, empty-dirs       Find empty directories"
    echo "  d, duplicates        Find duplicate files (by content)"
    echo "  p, permissions MODE  Find files with specific permissions (e.g., 777)"
    echo "  s, size SIZE         Find files by size (e.g., +10M, -1G)"
    echo "  t, type TYPE         Find by type (f:file, d:directory, l:symlink)"
    echo "  m, modified DAYS     Find files modified in last N days"
    echo "  a, accessed DAYS     Find files accessed in last N days"
    echo "  x, exec COMMAND      Execute command on each file (use {} as placeholder)"
    echo "  r, regex PATTERN     Find files matching regex pattern"
    echo "  g, grep PATTERN      Find files containing text pattern"
    echo "  l, symlinks          Find broken symlinks"
    echo "  f, fast              Use -xdev to skip other filesystems (faster)"
    echo
    echo "Global options:"
    echo "  --cmd                   Show the command to be executed before running"
    echo
    echo "Examples:"
    echo "  f --biggest 5 /home     Find 5 biggest files in /home"
    echo "  f --newest /var/log     Find 10 newest files in /var/log"
    echo "  f --size +100M /var     Find files larger than 100MB in /var"
    echo "  f --modified 7 ~        Find files modified in the last 7 days in home directory"
    echo "  f --exec 'chmod 644 {}' Find files and change permissions to 644"
    exit 1
}

# Default values
N=10
SHOW_CMD=false
SEARCH_PATH="."

# Parse command line arguments
POSITIONAL=()
while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        -h|--help)
            usage
            ;;
        --cmd)
            SHOW_CMD=true
            shift
            ;;
        b|biggest)
            ACTION="biggest"
            if [[ $2 =~ ^[0-9]+$ ]]; then
                N="$2"
                shift
            fi
            shift
            ;;
        n|newest)
            ACTION="newest"
            if [[ $2 =~ ^[0-9]+$ ]]; then
                N="$2"
                shift
            fi
            shift
            ;;
        o|oldest)
            ACTION="oldest"
            if [[ $2 =~ ^[0-9]+$ ]]; then
                N="$2"
                shift
            fi
            shift
            ;;
        e|empty)
            ACTION="empty"
            shift
            ;;
        ed|empty-dirs)
            ACTION="empty-dirs"
            shift
            ;;
        d|duplicates)
            ACTION="duplicates"
            shift
            ;;
        p|permissions)
            ACTION="permissions"
            if [[ -n "$2" ]]; then
                MODE="$2"
                shift
            else
                echo "Error: Permission mode required"
                exit 1
            fi
            shift
            ;;
        s|size)
            ACTION="size"
            if [[ -n "$2" ]]; then
                SIZE="$2"
                shift
            else
                echo "Error: Size parameter required"
                exit 1
            fi
            shift
            ;;
        t|type)
            ACTION="type"
            if [[ -n "$2" ]]; then
                TYPE="$2"
                shift
            else
                echo "Error: Type parameter required"
                exit 1
            fi
            shift
            ;;
        m|modified)
            ACTION="modified"
            if [[ $2 =~ ^[0-9]+$ ]]; then
                DAYS="$2"
                shift
            else
                echo "Error: Days parameter required"
                exit 1
            fi
            shift
            ;;
        a|accessed)
            ACTION="accessed"
            if [[ $2 =~ ^[0-9]+$ ]]; then
                DAYS="$2"
                shift
            else
                echo "Error: Days parameter required"
                exit 1
            fi
            shift
            ;;
        x|exec)
            ACTION="exec"
            if [[ -n "$2" ]]; then
                COMMAND="$2"
                shift
            else
                echo "Error: Command required"
                exit 1
            fi
            shift
            ;;
        r|regex)
            ACTION="regex"
            if [[ -n "$2" ]]; then
                PATTERN="$2"
                shift
            else
                echo "Error: Pattern required"
                exit 1
            fi
            shift
            ;;
        g|grep)
            ACTION="grep"
            if [[ -n "$2" ]]; then
                PATTERN="$2"
                shift
            else
                echo "Error: Pattern required"
                exit 1
            fi
            shift
            ;;
        l|symlinks)
            ACTION="symlinks"
            shift
            ;;
        f|fast)
            FAST="-xdev"
            shift
            ;;
        ex|examples)
            ACTION="examples"
            shift
            ;;
        *)
            # If it doesn't start with - or -- and we don't have a path yet, consider it a path
            if [[ ! "$1" =~ ^- ]] && [[ "$SEARCH_PATH" == "." ]]; then
                SEARCH_PATH="$1"
            else
                POSITIONAL+=("$1")
            fi
            shift
            ;;
    esac
done

# Restore positional parameters
set -- "${POSITIONAL[@]}"

# If no action is specified, show usage
if [[ -z "$ACTION" ]]; then
    usage
fi

    execute_command() {
    local cmd="$1"
    
    if [[ "$SHOW_CMD" == "true" ]]; then
        # Escape newlines in the command for display
        local display_cmd=$(echo "$cmd" | sed 's/\\n/\\\\n/g')
        echo -e "${WHITE}#${NC} ${GREEN}$display_cmd${NC}"
        echo -e "${WHITE}Press any key to execute...${NC}"
        read -n 1 -s
        echo -e "${WHITE}Command is executing...${NC}"
    fi
    
    eval "$cmd"
}

# Perform the selected action
case "$ACTION" in
    biggest)
        CMD="find \"$SEARCH_PATH\" -type f $FAST -not -path \"*/\\.*\" -exec du -h {} \\; | sort -hr | head -n $N"
        execute_command "$CMD"
        ;;
    newest)
        CMD="find \"$SEARCH_PATH\" -type f $FAST -not -path \"*/\\.*\" -printf '%TY-%Tm-%Td %TH:%TM:%TS %p\\n' | awk '{split(\$2,t,\".\"); print \$1\" \"t[1]\" \"\$3}' | sort -r | head -n $N"
        execute_command "$CMD"
        ;;
    oldest)
        CMD="find \"$SEARCH_PATH\" -type f $FAST -not -path \"*/\\.*\" -printf '%TY-%Tm-%Td %TH:%TM:%TS %p\\n' | awk '{split(\$2,t,\".\"); print \$1\" \"t[1]\" \"\$3}' | sort | head -n $N"
        execute_command "$CMD"
        ;;
    empty)
        CMD="find \"$SEARCH_PATH\" -type f -empty $FAST"
        execute_command "$CMD"
        ;;
    empty-dirs)
        CMD="find \"$SEARCH_PATH\" -type d -empty $FAST"
        execute_command "$CMD"
        ;;
    duplicates)
        CMD="find \"$SEARCH_PATH\" -type f $FAST -not -empty -printf '%s\\n' | sort -rn | uniq -d | xargs -I{} find \"$SEARCH_PATH\" -type f -size {}c -print0 | xargs -0 md5sum | sort | uniq -w32 --all-repeated=separate"
        execute_command "$CMD"
        ;;
    permissions)
        CMD="find \"$SEARCH_PATH\" -perm $MODE $FAST"
        execute_command "$CMD"
        ;;
    size)
        CMD="find \"$SEARCH_PATH\" -size $SIZE $FAST"
        execute_command "$CMD"
        ;;
    type)
        case "$TYPE" in
            f|file) TYPE_ARG="-type f" ;;
            d|dir|directory) TYPE_ARG="-type d" ;;
            l|link|symlink) TYPE_ARG="-type l" ;;
            *) echo "Unknown type: $TYPE"; exit 1 ;;
        esac
        CMD="find \"$SEARCH_PATH\" $TYPE_ARG $FAST"
        execute_command "$CMD"
        ;;
    modified)
        CMD="find \"$SEARCH_PATH\" -type f -mtime -$DAYS $FAST"
        execute_command "$CMD"
        ;;
    accessed)
        CMD="find \"$SEARCH_PATH\" -type f -atime -$DAYS $FAST"
        execute_command "$CMD"
        ;;
    exec)
        CMD="find \"$SEARCH_PATH\" -type f $FAST -exec $COMMAND \\;"
        execute_command "$CMD"
        ;;
    regex)
        CMD="find \"$SEARCH_PATH\" -regextype posix-extended -regex \"$PATTERN\" $FAST"
        execute_command "$CMD"
        ;;
    grep)
        CMD="find \"$SEARCH_PATH\" -type f $FAST -exec grep -l \"$PATTERN\" {} \\;"
        execute_command "$CMD"
        ;;
    symlinks)
        CMD="find \"$SEARCH_PATH\" -type l $FAST -exec test ! -e {} \\; -print"
        execute_command "$CMD"
        ;;
    examples)
        printf '%s\n' "\
$(tput bold)$(tput setaf 3)FIND COMMAND â€“ PAGE 1: CORE USAGE$(tput sgr0)
==========================================================================================================

$(tput setaf 3)BASICS$(tput sgr0)                                       |   $(tput setaf 3)FILTER BY NAME$(tput sgr0)
find . -type f      # All files              |   find . -name \"*.txt\"    # Files with .txt extension
find /dir -type d   # All dirs in /dir       |   find . -iname \"*.JPG\"   # Case-insensitive search
                                             |
$(tput setaf 3)BY TYPE$(tput sgr0)                                      |   $(tput setaf 3)BY SIZE$(tput sgr0)
find . -type f      # Regular files          |   find . -size +10M       # Larger than 10MB
find . -type l      # Symlinks               |   find . -size -1k        # Smaller than 1KB
                                             |
$(tput setaf 3)BY TIME$(tput sgr0)                                      |   $(tput setaf 3)EXECUTE COMMANDS$(tput sgr0)
find . -mtime -1    # Modified < 1 day       |   find . -type f -exec echo {} \;  # Example action
find . -atime +7    # Accessed > 7 days      |   find . -exec chmod 644 {} +      # Batch chmod
find . -ctime -2    # Metadata / status change in last 2 days
                                             |
$(tput setaf 3)DEPTH / PRUNE$(tput sgr0)                                |   $(tput setaf 3)PRINTING & FORMATTING$(tput sgr0)
find . -maxdepth 1  # Only this dir          |   find . -ls              # Detailed long list
find / -mindepth 2  # Skip top levels        |   find . -printf \"%p\n\"   # Custom path output
find . -path \"./.git\" -prune -o -name \"*.sh\" -print  # Prune: skip matching dirs early
$(tput setaf 2)Note: -prune prevents descent into matched directories â€“ great for skipping .git etc.$(tput sgr0)

----------------------------------------------------------------------------------------------------------

Press any key to continue to page 2..."
            read -rsn1

            printf '%s\n' "\
$(tput bold)$(tput setaf 3)FIND COMMAND â€“ PAGE 2: ADVANCED USAGE$(tput sgr0)
==========================================================================================================

$(tput setaf 3)LOGICAL OPERATORS$(tput sgr0)                            |   $(tput setaf 3)NEGATION & COMPOUNDING$(tput sgr0)
find . \( -name \"*.sh\" -o -name \"*.py\" \)    # .sh or .py files    |   find . ! -name \"*.txt\"         # Not .txt
find . -type f -a -size +1M            # Files AND >1MB                |   find . -type f \( -empty -o -size 0 \)
                                                                      |     # Empty files or 0-byte
                                             |
$(tput setaf 3)PERMISSIONS / OWNERSHIP$(tput sgr0)                     |   $(tput setaf 3)SYMLINK HANDLING$(tput sgr0)
find . -perm 644        # Exact perm 644       |   find . -type l       # Symlinks only
find . -perm -111       # Any execute bit      |   find . -L -type f    # Follow symlinks
find . -user bob        # Files owned by bob
                                             |
$(tput setaf 3)FILESYSTEM BOUNDARIES$(tput sgr0)                        |   $(tput setaf 3)EXCLUDE BY EXTENSION$(tput sgr0)
find . -xdev            # Stay on same fs      |   find . ! -name \"*.log\"     # Exclude .log files
find /mnt -xdev         # Skip mounted drives  |   find . ! \( -name \"*.bak\" -o -name \"*.tmp\" \)
                                             |     # Exclude backup/tmp
                                             |
$(tput setaf 3)HANDLING SPECIAL CHARS$(tput sgr0)                       |   $(tput setaf 3)NULL-SAFE OUTPUT$(tput sgr0)
find . -name \"* *\"       # Names with spaces   |   find . -print0       # Safer with xargs -0
find . -name \"*[*]*\"     # Names with brackets |   find . -type f -print0 | xargs -0 rm -v
$(tput setaf 2)Note: Always quote patterns with wildcards or spaces to avoid shell globbing$(tput sgr0)

----------------------------------------------------------------------------------------------------------

"
        ;;

    *)
        echo "Unknown action: $ACTION"
        usage
        ;;
esac

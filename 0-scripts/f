#!/bin/bash
# Find Utility Script
# Provides a set of common find operations with an easier-to-use interface.

BLUE="\e[34m"
RESET="\e[0m"

# Default to not showing the command
show_command=false

if [ $# -eq 0 ]; then
    echo "
Find Utility. Usage: f [option <modifier>] <path> <pattern(s)>
  If an option takes a modifier, that must be directly after the option
  Then a (single) path argument (optional, will default to ".")
  Then search patterns (multiple, but also optional).
  e.g. f td 3 \"*.py\" \"*.sh\"
Options:
  fc           Files Common (find files in common directories, searched in /etc, /usr, /opt, /var, $HOME)
  dc           Dirs Common (find directories in common locations, searched in /etc, /usr, /opt, /var, $HOME)
  td <days>    Find files modified in the last X days
  th <hours>   Find files modified in the last X hours
  tm <minutes> Find files modified in the last X minutes
  ge <size>    Greater than or equal to size, e.g., 100M, 1G
  le <size>    Less than or equal to size, e.g., 100M, 1G
  exe          Find executable files
  sym          Find symbolic links
  empty        Find empty files and directories under path
  me           Find files owned by the current user under path
  ext <ext>    Find files by extension, e.g., f ext py
  docs         Find document types under path (e.g., pdf, doc, txt, log)
  common       Find common file types (e.g., conf, sh, txt, log, md)
  s            Show file sizes with stat
  p            Show file permissions with stat
  sp           Show size, then permissions, then name
  ps           Show permissions, then size, then name
"
    exit 0
fi

option=$1
shift

# Check for -cmd switch and set flag
for arg in "$@"; do
    if [ "$arg" == "-cmd" ]; then
        show_command=true
        break
    fi
done

# Remove the -cmd from the arguments
args=()
for arg in "$@"; do
    if [ "$arg" != "-cmd" ]; then
        args+=("$arg")
    fi
done
echo $args

# Determine if the first argument is a valid directory, else default to "."
if [ -d "${args[0]}" ]; then
    search_path="${args[0]}"
    args=("${args[@]:1}")
else
    search_path="."
fi
echo $args
echo $search_path

# Normalize search_path to avoid duplicate dots
search_path=$(echo "$search_path" | xargs)

run_find_named() {
    find_cmd="find $search_path $@"
    if [ "$show_command" = true ]; then
        echo -e "${BLUE}$find_cmd${RESET}"
    else
        eval "$find_cmd | xargs -0"
    fi
}

build_name_condition() {
    local patterns=("$@")
    if [ ${#patterns[@]} -eq 0 ]; then
        echo ""
    else
        condition="\\("
        for pattern in "${patterns[@]}"; do
            condition+=" -name '$pattern' -o"
        done
        condition="${condition% -o} \\)"
        echo "$condition"
    fi
}

case "$option" in
    fc)
        run_find_named "/etc /usr /opt /var $HOME -type f $(build_name_condition "${args[@]}")"
        ;;
    dc)
        run_find_named "/etc /usr /opt /var $HOME -type d $(build_name_condition "${args[@]}")"
        ;;
    td)
        run_find_named "$search_path -type f -mtime -${args[0]} $(build_name_condition "${args[@]:1}")"
        ;;
    th)
        run_find_named "$search_path -type f -mmin -$((args[0] * 60)) $(build_name_condition "${args[@]:1}")"
        ;;
    tm)
        run_find_named "$search_path -type f -mmin -${args[0]} $(build_name_condition "${args[@]:1}")"
        ;;
    ge)
        run_find_named "$search_path -type f -size +${args[0]} $(build_name_condition "${args[@]:1}")"
        ;;
    le)
        run_find_named "$search_path -type f -size -${args[0]} $(build_name_condition "${args[@]:1}")"
        ;;
    exe)
        run_find_named "$search_path -type f -executable $(build_name_condition "${args[@]}")"
        ;;
    sym)
        run_find_named "$search_path -type l $(build_name_condition "${args[@]}")"
        ;;
    empty)
        run_find_named "$search_path -type f -empty -o -type d -empty $(build_name_condition "${args[@]}")"
        ;;
    me)
        run_find_named "$search_path -type f -user $(whoami) $(build_name_condition "${args[@]}")"
        ;;
    docs)
        run_find_named "$search_path -type f \( -name '*.pdf' -o -name '*.doc' -o -name '*.txt' -o -name '*.log' \) $(build_name_condition "${args[@]}")"
        ;;
    common)
        run_find_named "$search_path -type f \( -name '*.conf' -o -name '*.sh' -o -name '*.txt' -o -name '*.log' -o -name '*.md' \) $(build_name_condition "${args[@]}")"
        ;;
    s)
        run_find_named "$search_path $(build_name_condition "${args[@]}") -exec stat --format='%s %n' {} \\;"
        ;;
    p)
        run_find_named "$search_path $(build_name_condition "${args[@]}") -exec stat --format='%A %n' {} \\;"
        ;;
    sp)
        run_find_named "$search_path $(build_name_condition "${args[@]}") -exec stat --format='%s %A %n' {} \\;"
        ;;
    ps)
        run_find_named "$search_path $(build_name_condition "${args[@]}") -exec stat --format='%A %s %n' {} \\;"
        ;;
    *)
        run_find_named "$search_path ${args[@]}"
        ;;
esac


#!/bin/bash
# Find Utility Script
# Provides a set of common find operations with an easier-to-use interface.

BLUE="\e[34m"
RESET="\e[0m"

# Default to not showing the command
show_command=false

if [ $# -eq 0 ]; then
    echo "
Find Utility. Usage: f [option <modifier>] <path> <pattern(s)>
  If an option takes a modifier, that must be directly after the option
  Then a (single) path argument (optional, will default to \".\")
  Then search patterns (multiple, but also optional).
  e.g. f td 3 \"*.py\" \"*.sh\"
Options:
  fc           Files Common (find files in common directories, searched in /etc, /usr, /opt, /var, ~)
  dc           Dirs Common (find directories in common locations, searched in /etc, /usr, /opt, /var, ~)
  td <days>    Find files modified in the last X days
  th <hours>   Find files modified in the last X hours
  tm <minutes> Find files modified in the last X minutes
  ge <size>    Greater than or equal to size, e.g., 100M, 1G
  le <size>    Less than or equal to size, e.g., 100M, 1G
  exe          Find executable files
  sym          Find symbolic links
  empty        Find empty files and directories under path
  mine         Find files owned by the current user under path
  ext <ext>    Find files by extension, e.g., f ext py
  docs         Find document types under path (e.g., pdf, doc, txt, log)
  common       Find common file types (e.g., conf, sh, txt, log, md)
  s            Show file sizes with stat
  p            Show file permissions with stat
  sp           Show size, then permissions, then name
  ps           Show permissions, then size, then name
"
    exit 0
fi

option=$1
shift

# Check for -cmd switch and set flag
for arg in "$@"; do
    if [ "$arg" == "-cmd" ]; then
        show_command=true
        break
    fi
done

# Remove the -cmd from the arguments
args=()
for arg in "$@"; do
    if [ "$arg" != "-cmd" ]; then
        args+=("$arg")
    fi
done

run_find_named() {
    # Build a specific find command with named conditions
    find_cmd="find $@"
    if [ "$show_command" = true ]; then
        echo -e "${BLUE}$find_cmd${RESET}"
    else
        eval $find_cmd  # Execute the find command with the arguments
    fi
}

run_find_passthrough() {
    # Handle raw passthrough find and ensure patterns are quoted properly
    local args=("$@")

    # Iterate over the arguments and quote any unquoted pattern-like argument
    for i in "${!args[@]}"; do
        if [[ "${args[$i]}" == *\** ]]; then
            args[$i]='"'"${args[$i]}"'"'  # Add quotes around patterns like *.py
        fi
    done

    find_cmd="find ${args[@]}"
    if [ "$show_command" = true ]; then
        echo -e "${BLUE}$find_cmd${RESET}"
    else
        eval $find_cmd  # Execute the passthrough find command with the arguments
    fi
}

build_name_condition() {
    local patterns=("$@")
    if [ ${#patterns[@]} -eq 0 ]; then
        # No patterns, return empty condition (find will handle this as is)
        echo ""
    else
        # If multiple patterns, combine them with -o
        condition="\\( "
        for pattern in "${patterns[@]}"; do
            condition+="-name \"$pattern\" -o "
        done
        # Remove the trailing -o
        condition="${condition% -o }"
        condition+=" \\)"
        echo "$condition"
    fi
}

case "$option" in
    fc)
        run_find_named "/etc /usr /opt /var ~ -type f $(build_name_condition "${args[@]}")"
        ;;
    dc)
        run_find_named "/etc /usr /opt /var ~ -type d $(build_name_condition "${args[@]}")"
        ;;
    td)
        # Time-days: find files modified in the last X days
        name_condition=$(build_name_condition "${args[@]:2}")
        run_find_named "${args[1]} -type f -mtime -${args[0]} $name_condition"
        ;;
    th)
        # Time-hours: find files modified in the last X hours
        name_condition=$(build_name_condition "${args[@]:2}")
        run_find_named "${args[1]} -type f -mmin -$((args[0] * 60)) $name_condition"
        ;;
    tm)
        # Time-minutes: find files modified in the last X minutes
        name_condition=$(build_name_condition "${args[@]:2}")
        run_find_named "${args[1]} -type f -mmin -${args[0]} $name_condition"
        ;;
    ge)
        # Correct handling for ge <path> <size>
        name_condition=$(build_name_condition "${args[@]:2}")
        run_find_named "${args[0]} -type f -size +${args[1]} $name_condition"
        ;;
    le)
        # Correct handling for le <path> <size>
        name_condition=$(build_name_condition "${args[@]:2}")
        run_find_named "${args[0]} -type f -size -${args[1]} $name_condition"
        ;;
    ext)
        # Here, args[0] is the extension, args[1] is the path
        ext="${args[0]}"
        # If the extension doesn't start with a dot, prepend one
        if [[ "$ext" != .* ]]; then
            ext=".$ext"
        fi
        path="${args[1]}"
        # Build the find command: search in $path for files matching *$ext
        run_find_named "$path -type f -name \"*${ext}\""
        ;;
    exe)
        name_condition=$(build_name_condition "${args[@]}")
        run_find_named "${args[0]} -type f -executable $name_condition"
        ;;
    sym)
        name_condition=$(build_name_condition "${args[@]}")
        run_find_named "${args[0]} -type l $name_condition"
        ;;
    empty)
        name_condition=$(build_name_condition "${args[@]}")
        run_find_named "${args[0]} -type f -empty -o -type d -empty $name_condition"
        ;;
    mine)
        name_condition=$(build_name_condition "${args[@]}")
        run_find_named "${args[0]} -type f -user $(whoami) $name_condition"
        ;;
    docs)
        name_condition=$(build_name_condition "${args[@]}")
        run_find_named "${args[0]} -type f \( -name \"*.pdf\" -o -name \"*.doc\" -o -name \"*.txt\" -o -name \"*.log\" \) $name_condition"
        ;;
    common)
        name_condition=$(build_name_condition "${args[@]}")
        run_find_named "${args[0]} -type f \( -name \"*.conf\" -o -name \"*.sh\" -o -name \"*.txt\" -o -name \"*.log\" -o -name \"*.md\" \) $name_condition"
        ;;
    s)
        name_condition=$(build_name_condition "${args[@]}")
        run_find_named ". $name_condition -exec stat --format=\"%s %n\" {} \;"
        ;;
    p)
        name_condition=$(build_name_condition "${args[@]}")
        run_find_named ". $name_condition -exec stat --format=\"%A %n\" {} \;"
        ;;
    sp)
        name_condition=$(build_name_condition "${args[@]}")
        run_find_named ". $name_condition -exec stat --format=\"%s %A %n\" {} \;"
        ;;
    ps)
        name_condition=$(build_name_condition "${args[@]}")
        run_find_named ". $name_condition -exec stat --format=\"%A %s %n\" {} \;"
        ;;
    *)
        # Directly handle passthrough for unknown options
        run_find_passthrough "$option" "${args[@]}"
        ;;
esac


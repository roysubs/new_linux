#!/bin/bash

# Directory to list files (default: current directory)
DIRECTORY="."
SORT=false

# Check for -sort switch
for arg in "$@"; do
    case $arg in
        -sort|-s)
        SORT=true
        shift
        ;;
        *)
        DIRECTORY="$arg"
        shift
        ;;
    esac
done

# Get the file sizes
file_sizes=$(find "$DIRECTORY" -maxdepth 1 -type f -exec stat --format="%s %n" {} \;)

# Check if directory is empty or no files found
if [ -z "$file_sizes" ]; then
    echo "No files found in the specified directory."
    exit 1
fi

# Sort file sizes if -sort switch is provided
if $SORT; then
    file_sizes=$(echo "$file_sizes" | sort -n)
fi

# Get the maximum file size for scaling the bars
max_size=$(echo "$file_sizes" | awk '{print $1}' | sort -n | tail -n 1)

# Find the longest filename
max_filename_length=$(echo "$file_sizes" | awk '{$1=""; print substr($0,2)}' | awk '{print length}' | sort -nr | head -n 1)

# Function to convert bytes to human-readable format
human_readable_size() {
    local size=$1
    if   [ $size -lt 1024 ]; then       echo "${size} B"
    elif [ $size -lt 1048576 ]; then    printf "%.1f K" "$(echo "scale=1; $size/1024" | bc)"
    elif [ $size -lt 1073741824 ]; then printf "%.1f M" "$(echo "scale=1; $size/1048576" | bc)"
    else                                printf "%.1f G" "$(echo "scale=1; $size/1073741824" | bc)"
    fi
}

# Find the maximum size length for alignment
max_size_length=$(echo "$file_sizes" | awk '{print $1}' | awk '{print length}' | sort -nr | head -n 1)
max_size_length=$((max_size_length + 2))  # Adding space for size unit (B, K, M, G)

# Display the bar graph for each file
echo "File Size Bar Graph:"
echo

# Loop through each file and create a bar graph
while read -r line; do
    # Split the size and filename
    size=$(echo "$line" | awk '{print $1}')
    filename=$(echo "$line" | awk '{$1=""; print substr($0,2)}')

    # Calculate the bar length relative to the maximum size
    bar_length=$(( (size * 50) / max_size ))  # Scale to a max length of 50

    # Generate the bar graph using Unicode block characters
    bar=$(printf "%-${bar_length}s" "#" | tr ' ' '#')

    # Convert size to human-readable format
    hr_size=$(human_readable_size $size)

    # Display the bar graph with aligned columns
    printf "%-${max_filename_length}s %${max_size_length}s | %-50s\n" "$filename" "$hr_size" "$bar"
done <<< "$file_sizes"


Here's a handpicked toolbox of CLI and TUI tools like Onefetch that enhance your interaction with Git projects—covering everything from visualization and management to discovering new repos. Grouped for clarity:

📊 Visualizing and Analyzing Git Repositories
✅ onefetch
Stylish Git repo summary with language stats and ASCII logos.

📈 gitui
Blazing fast TUI for Git. Stage, commit, diff, branch, stash—all from the terminal.

bash
Copy
Edit
cargo install gitui
🧠 git-graph
Simple and readable commit graph visualizer in terminal.

bash
Copy
Edit
cargo install git-graph
📚 tig
TUI interface for browsing Git logs and diffs.

bash
Copy
Edit
sudo apt install tig  # or brew install tig
🧮 gitstats
Generates static web pages with statistics (e.g., commits per dev, per day).

bash
Copy
Edit
sudo apt install gitstats
📊 gource
Animated tree visualization of a repo’s history.

bash
Copy
Edit
sudo apt install gource
🧩 Repo Metadata and Intelligence
📇 gitinfo
Lightweight tool to show info about the last commit, branch, remote, etc.

bash
Copy
Edit
cargo install gitinfo
🧾 git-summary
Summary of Git activity: commits by author, recent activity, etc.

bash
Copy
Edit
npm install -g git-summary
🔍 Finding Git Repositories
🌐 gh (GitHub CLI)
Search, clone, fork, manage GitHub projects from terminal.

bash
Copy
Edit
brew install gh  # or apt, scoop, etc.
gh repo search "rust game engine" --language rust
🔎 sr
Search for GitHub projects by language, topic, etc.

bash
Copy
Edit
cargo install sr
📂 git-repo-finder
Search for local Git repos by crawling directories.

bash
Copy
Edit
pip install git-repo-finder
git-repo-finder ~/projects
📁 Managing Multiple Git Repos
🔄 git-aggregate
Run commands across multiple repos. Great for mono/multi-repo workflows.

bash
Copy
Edit
cargo install git-aggregate
📦 repo
Google’s repo tool for managing many Git repos (used in Android development).

bash
Copy
Edit
sudo apt install repo
📘 ghq
Organize and track cloned repositories by category. Pairs well with fzf.

bash
Copy
Edit
brew install ghq
🛠️ Improved Git Workflows
🚀 lazygit
TUI for Git operations, fast and minimal.

bash
Copy
Edit
brew install lazygit
🛠️ delta
Syntax-highlighted diffs, can be a drop-in replacement for diff.

bash
Copy
Edit
brew install git-delta
🧹 git-trim
Suggests and deletes merged/stale branches (local & remote).

bash
Copy
Edit
cargo install git-trim
🗑️ git-delete-squashed
Delete branches already squashed and merged into main.

bash
Copy
Edit
cargo install git-delete-squashed
🐢 Other Notables
⌛ committed
Shows how long you've worked on a repo (based on commit history).

bash
Copy
Edit
cargo install committed
🧱 grv
Terminal-based interface for visualizing Git history and commits.

bash
Copy
Edit
brew install grv
Would you like a shell alias script that wraps these into a convenient launcher, or maybe a curated setup just for your own repos?







You said:
yes, do both of those things


ChatGPT said:
Perfect! Here's what I’ll give you:

A shell launcher script with aliases and shortcuts for the best tools

A minimal curated setup for your own local repos (say, in ~/projects), including:

Quick Git summary

Multi-repo scan and overview

Repo discovery

Let’s go!

🧠 1. Shell Launcher Script – ~/.git-tools.sh
Add this to your shell config (~/.bashrc, ~/.zshrc, etc.) or source it directly.

bash
Copy
Edit
# ~/.git-tools.sh

# === One-liner Git Insights ===
alias gfetch="onefetch"
alias gsummary="git-summary"
alias ginfo="gitinfo"
alias gtrim="git-trim"
alias gsquashed="git-delete-squashed"

# === TUI Tools ===
alias ggit="gitui"
alias lg="lazygit"
alias ggraph="git-graph"
alias tiglog="tig"
alias gource="gource"

# === GitHub CLI & Discovery ===
alias ghsearch='gh repo search'
alias srsearch='sr'  # cargo install sr
alias ghclone="gh repo clone"

# === Multi-repo Utilities ===
alias gfind='git-repo-finder ~/projects'
alias gall="git-aggregate -d ~/projects -c"
alias gtrimall='find ~/projects -type d -name ".git" | while read d; do (cd "$(dirname "$d")" && git-trim); done'

# === Diffs & Logs ===
alias gdelta='git diff | delta'
alias gstats='gitstats . ./gitstats_output && xdg-open ./gitstats_output/index.html'

# === Fancy Visuals ===
alias gviz='gource --seconds-per-day 0.2 --auto-skip-seconds 1'

# === Setup if needed ===
export PATH="$HOME/.cargo/bin:$PATH"
Then, activate it with:

bash
Copy
Edit
source ~/.git-tools.sh
🗂️ 2. Curated Local Git Repo Setup (assumes ~/projects)
Here’s a structure + helper script to use across all your own Git repos.

📂 Structure
text
Copy
Edit
~/projects/
├── rust/
├── python/
├── bash/
├── experiments/
Use ghq or git clone into those folders.

🧩 Helper Script: gstatusall.sh
bash
Copy
Edit
#!/bin/bash
# ~/bin/gstatusall.sh

echo "📦 Scanning Git Repositories in ~/projects..."
find ~/projects -type d -name ".git" | while read d; do
  repo_dir="$(dirname "$d")"
  echo -e "\n🔹 $(basename "$repo_dir")"
  (cd "$repo_dir" && git status -s && git branch --show-current)
done
Make it executable:

bash
Copy
Edit
chmod +x ~/bin/gstatusall.sh
Then run:

bash
Copy
Edit
~/bin/gstatusall.sh
💥 Bonus Script: gsummaryall.sh
bash
Copy
Edit
#!/bin/bash
# ~/bin/gsummaryall.sh

echo "📊 Git Summary for all repos in ~/projects"
find ~/projects -type d -name ".git" | while read d; do
  repo_dir="$(dirname "$d")"
  echo -e "\n🔹 $(basename "$repo_dir")"
  (cd "$repo_dir" && onefetch || echo "  Onefetch failed")
done


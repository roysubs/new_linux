Name: Audiobookshelf
Description: A self-hosted audiobook and podcast server, specifically designed for audio content.
Port: 13378
# docker pull ghcr.io/advplyr/audiobookshelf
# docker run -d \
#   --name=audiobookshelf \
#   -p 13378:80 \
#   -v <path_to_audiobooks>:/audiobooks \
#   -v <path_to_config>:/config \
#   -e PUID=1000 \
#   -e PGID=1000 \
#   -e TZ=Etc/UTC \
#   ghcr.io/advplyr/audiobookshelf
Options: None specifically common beyond standard Docker options.

Name: Navidrome
Description: A modern, open-source music server and streamer, inspired by Subsonic.
Port: 4533
# docker pull deluan/navidrome
# docker run -d \
#   --name=navidrome \
#   -p 4533:4533 \
#   -v <path_to_data>:/data \
#   -v <path_to_music>:/music \
#   -e PUID=1000 \
#   -e PGID=1000 \
#   -e TZ=Etc/UTC \
#   deluan/navidrome
Options: None specifically common beyond standard Docker options.

Name: qBittorrent-nox
Description: A lightweight and powerful BitTorrent client with a web user interface.
Port: 8080
# docker pull linuxserver/qbittorrent
# docker run -d \
#   --name=qbittorrent \
#   -p 6881:6881 \
#   -p 6881:6881/udp \
#   -p 8080:8080 \
#   -v <path_to_config>:/config \
#   -v <path_to_downloads>:/downloads \
#   -e PUID=1000 \
#   -e PGID=1000 \
#   -e TZ=Etc/UTC \
#   -e WEBUI_PORT=8080 \
#   linuxserver/qbittorrent
Options: WEBUI_PORT

Name: Syncthing
Description: A continuous file synchronization program that syncs files between two or more computers in real time.
Port: 8384 (Web UI), 22000 (Sync TCP), 21027 (Sync UDP)
# docker pull lscr.io/linuxserver/syncthing
# docker run -d \
#   --name=syncthing \
#   -p 8384:8384 \
#   -p 22000:22000 \
#   -p 21027:21027/udp \
#   -v <path_to_config>:/config \
#   -v <path_to_data>:/data \
#   -e PUID=1000 \
#   -e PGID=1000 \
#   -e TZ=Etc/UTC \
#   lscr.io/linuxserver/syncthing
Options: None specifically common beyond standard Docker options.

Name: Transmission
Description: A simple and popular BitTorrent client with a web interface.
Port: 9091 (Web UI), 51413 (BitTorrent)
# docker pull linuxserver/transmission
# docker run -d \
#   --name=transmission \
#   -p 9091:9091 \
#   -p 51413:51413 \
#   -p 51413:51413/udp \
#   -v <path_to_config>:/config \
#   -v <path_to_downloads>:/downloads \
#   -v <path_to_watch>:/watch \
#   -e PUID=1000 \
#   -e PGID=1000 \
#   -e TZ=Etc/UTC \
#   -e USER=<your_user> \
#   -e PASS=<your_password> \
#   linuxserver/transmission
Options: USER, PASS

Name: Deluge
Description: A feature-rich BitTorrent client with client/server architecture and a web UI.
Port: 8112 (Web UI), 58846 (Daemon)
# docker pull linuxserver/deluge
# docker run -d \
#   --name=deluge \
#   -p 8112:8112 \
#   -p 58846:58846 \
#   -p 58846:58846/udp \
#   -v <path_to_config>:/config \
#   -v <path_to_downloads>:/downloads \
#   -v <path_to_watch>:/watch \
#   -e PUID=1000 \
#   -e PGID=1000 \
#   -e TZ=Etc/UTC \
#   linuxserver/deluge
Options: None specifically common beyond standard Docker options.

Name: SABnzbd
Description: A Usenet binary downloader with a web interface.
Port: 8080
# docker pull linuxserver/sabnzbd
# docker run -d \
#   --name=sabnzbd \
#   -p 8080:8080 \
#   -p 9117:9117 `# optional, for external access to logs/data` \
#   -v <path_to_config>:/config \
#   -v <path_to_downloads>:/downloads \
#   -v <path_to_incomplete_downloads>:/incomplete-downloads \
#   -e PUID=1000 \
#   -e PGID=1000 \
#   -e TZ=Etc/UTC \
#   linuxserver/sabnzbd
Options: None specifically common beyond standard Docker options.

Name: NZBGet
Description: A highly efficient Usenet downloader, known for performance, with a web UI.
Port: 6789
# docker pull linuxserver/nzbget
# docker run -d \
#   --name=nzbget \
#   -p 6789:6789 \
#   -v <path_to_config>:/config \
#   -v <path_to_downloads>:/downloads \
#   -v <path_to_incomplete_downloads>:/incomplete-downloads \
#   -e PUID=1000 \
#   -e PGID=1000 \
#   -e TZ=Etc/UTC \
#   linuxserver/nzbget
Options: None specifically common beyond standard Docker options.

Name: Jellyfin
Description: A free and open-source media system that takes care of managing, serving, and streaming your media.
Port: 8096 (HTTP), 8920 (HTTPS)
# docker pull jellyfin/jellyfin
# docker run -d \
#   --name=jellyfin \
#   -p 8096:8096 \
#   -p 8920:8920 `# optional, for https` \
#   -v <path_to_config>:/config \
#   -v <path_to_cache>:/cache \
#   -v <path_to_media>:/media \
#   --runtime=nvidia `# optional, for NVIDIA hardware acceleration` \
#   --device=/dev/dri:/dev/dri `# optional, for Intel hardware acceleration` \
#   jellyfin/jellyfin
Options: --runtime, --device (for hardware acceleration)

Name: Emby
Description: A personal media server that organizes and streams audio and video to various devices (some features require subscription).
Port: 8096 (HTTP), 8920 (HTTPS)
# docker pull emby/embyserver
# docker run -d \
#   --name=emby \
#   -p 8096:8096 \
#   -p 8920:8920 `# optional, for https` \
#   -v <path_to_config>:/config \
#   -v <path_to_media>:/media \
#   -e PUID=1000 \
#   -e PGID=1000 \
#   -e TZ=Etc/UTC \
#   --runtime=nvidia `# optional, for NVIDIA hardware acceleration` \
#   --device=/dev/dri:/dev/dri `# optional, for Intel hardware acceleration` \
#   emby/embyserver
Options: --runtime, --device (for hardware acceleration)

Name: PhotoPrism
Description: An AI-powered photos app for Browse, organizing, and sharing your personal photo collection.
Port: 2342
# docker pull photoprism/photoprism
# docker run -d \
#   --name=photoprism \
#   -p 2342:2342 \
#   -v <path_to_photos>:/photos \
#   -v <path_to_storage>:/photoprism/storage \
#   -e PHOTOPRISM_ADMIN_USER=<your_user> \
#   -e PHOTOPRISM_ADMIN_PASSWORD=<your_password> \
#   -e TZ=Etc/UTC \
#   photoprism/photoprism
Options: PHOTOPRISM_ADMIN_USER, PHOTOPRISM_ADMIN_PASSWORD, TZ

Name: Immich
Description: A self-hosted photo and video backup solution, modern and feature-rich. (Requires multiple containers - microservices)
Port: 2283 (Server), 3003 (Machine Learning)
# docker pull ghcr.io/immich-app/immich
# docker-compose up -d `# Immich is typically deployed using Docker Compose due to multiple services.`
Options: Typically configured via environment variables in a docker-compose.yml file (e.g., IMMICH_PORT, IMMICH_MACHINE_LEARNING_PORT). Specific command line options for a single container run are less common.

Name: Nextcloud
Description: A suite of client-server software for creating file hosting and content collaboration services. (Requires a database container like MariaDB/PostgreSQL and a web server like Nginx)
Port: 80 (or 443 if using HTTPS via a reverse proxy)
# docker pull nextcloud:fpm
# docker run -d \
#   --name=nextcloud_app \
#   -v <path_to_nextcloud_data>:/var/www/html \
#   -e MYSQL_DATABASE=<db_name> \
#   -e MYSQL_USER=<db_user> \
#   -e MYSQL_PASSWORD=<db_password> \
#   -e MYSQL_HOST=<db_host> \
#   nextcloud:fpm
# `# Requires separate containers for database and web server.`
Options: MYSQL_DATABASE, MYSQL_USER, MYSQL_PASSWORD, MYSQL_HOST (for database connection)

Name: Owncloud
Description: A suite of client-server software for creating and using file hosting services (alternative to Nextcloud). (Often requires a database container)
Port: 80 (or 443 if using HTTPS via a reverse proxy)
# docker pull owncloud/server
# docker run -d \
#   --name=owncloud_app \
#   -v <path_to_owncloud_data>:/mnt/data \
#   -e OWNCLOUD_UPDATE=true \
#   -e OWNCLOUD_MICROSERVICES_GOCERNATES_JWT_SECRET=<your_secret> \
#   -e OWNCLOUD_MICROSERVICES_WEB_PUBLIC_KEY=<your_public_key> \
#   -e OWNCLOUD_MICROSERVICES_WEB_PRIVATE_KEY=<your_private_key> \
#   # ... database connection environment variables ...
#   owncloud/server
Options: OWNCLOUD_UPDATE, OWNCLOUD_MICROSERVICES_GOCERNATES_JWT_SECRET, OWNCLOUD_MICROSERVICES_WEB_PUBLIC_KEY, OWNCLOUD_MICROSERVICES_WEB_PRIVATE_KEY, plus various database connection options.

Name: Home Assistant
Description: A free and open-source software for home automation.
Port: 8123
# docker pull ghcr.io/home-assistant/home-assistant:stable
# docker run -d \
#   --name homeassistant \
#   --privileged \
#   -e TZ=Etc/UTC \
#   -v <path_to_config>:/config \
#   --network=host \
#   ghcr.io/home-assistant/home-assistant:stable
Options: --privileged, --network=host (often used for device discovery)

Name: Node-RED
Description: A flow-based programming tool for wiring together hardware devices, APIs, and online services.
Port: 1880
# docker pull nodered/node-red
# docker run -d \
#   --name nodered \
#   -p 1880:1880 \
#   -v <path_to_data>:/data \
#   nodered/node-red
Options: None specifically common beyond standard Docker options.

Name: Pi-hole
Description: A network-wide ad blocker acting as a DNS server.
Port: 80 (Web UI), 53 (DNS TCP/UDP), 67 (DHCP UDP - optional)
# docker pull pihole/pihole
# docker run -d \
#   --name pihole \
#   -p 80:80 \
#   -p 53:53/tcp \
#   -p 53:53/udp \
#   -p 67:67/udp `# Only required if using Pi-hole as DHCP server` \
#   -v <path_to_etc_pihole>:/etc/pihole \
#   -v <path_to_etc_dnsmasq_d>:/etc/dnsmasq.d \
#   -e TZ=Etc/UTC \
#   -e WEBPASSWORD="<set_a_password>" \
#   --dns=127.0.0.1 \
#   --hostname pihole \
#   --restart=unless-stopped \
#   pihole/pihole
Options: WEBPASSWORD, --dns, --hostname

Name: AdGuard Home
Description: A network-wide software for blocking ads and tracking (alternative to Pi-hole).
Port: 3000 (Initial Setup), 80 (Web UI), 53 (DNS TCP/UDP), 67 (DHCP UDP - optional)
# docker pull adguard/adguardhome
# docker run -d \
#   --name adguardhome \
#   -p 3000:3000 `# Port for initial setup` \
#   -p 80:80 \
#   -p 53:53/tcp \
#   -p 53:53/udp \
#   -p 67:67/udp `# Only required if using AdGuard Home as DHCP server` \
#   -v <path_to_work>:/opt/adguardhome/work \
#   -v <path_to_conf>:/opt/adguardhome/conf \
#   adguard/adguardhome
Options: None specifically common beyond standard Docker options.

Name: Nginx Proxy Manager
Description: A reverse proxy management system built on Nginx with a user-friendly web interface. (Requires a database container)
Port: 81 (Web UI), 80 (HTTP), 443 (HTTPS)
# docker pull jc21/nginx-proxy-manager
# docker run -d \
#   --name=npm \
#   -p 81:81 \
#   -p 80:80 \
#   -p 443:443 \
#   -v <path_to_data>:/data \
#   -v <path_to_letsencrypt>:/etc/letsencrypt \
#   # ... database connection environment variables ...
#   jc21/nginx-proxy-manager
Options: Various environment variables for database connection.

Name: Traefik
Description: A modern HTTP reverse proxy and load balancer that integrates with your existing infrastructure components.
Port: 80 (HTTP), 443 (HTTPS), 8080 (API/Dashboard - often internal)
# docker pull traefik:latest
# docker run -d \
#   --name=traefik \
#   -p 80:80 \
#   -p 443:443 \
#   -p 8080:8080 `# Optional, for API/Dashboard` \
#   -v /var/run/docker.sock:/var/run/docker.sock:ro \
#   -v <path_to_config>:/etc/traefik \
#   traefik:latest \
#   --api.dashboard=true \
#   --providers.docker \
#   --providers.docker.exposedbydefault=false
Options: Various command line arguments and configuration file options (e.g., --api.dashboard, --providers.docker).

Name: Caddy
Description: A powerful, enterprise-ready, open-source web server with automatic HTTPS.
Port: 80 (HTTP), 443 (HTTPS), 2019 (Admin API)
# docker pull caddy:latest
# docker run -d \
#   --name=caddy \
#   -p 80:80 \
#   -p 443:443 \
#   -v <path_to_caddyfile>:/etc/caddy/Caddyfile \
#   -v <path_to_data>:/data \
#   caddy:latest
Options: Configuration is primarily done via the Caddyfile or Admin API, not typically via command line options in docker run beyond mounting volumes.

Name: Organizr
Description: A dashboard that allows you to organize all your self-hosted services.
Port: 80 (or 443 via reverse proxy)
# docker pull linuxserver/organizr
# docker run -d \
#   --name=organizr \
#   -p 80:80 \
#   -e PUID=1000 \
#   -e PGID=1000 \
#   -e TZ=Etc/UTC \
#   -v <path_to_config>:/config \
#   linuxserver/organizr
Options: None specifically common beyond standard Docker options.

Name: Dashy
Description: A modern, highly customizable dashboard for your apps and services.
Port: 80 (or 443 via reverse proxy)
# docker pull lissy93/dashy
# docker run -d \
#   --name=dashy \
#   -p 80:80 \
#   -v <path_to_config>:/app/user-data/conf.yml \
#   lissy93/dashy
Options: None specifically common beyond standard Docker options.

Name: Heimdall
Description: A simple dashboard for all your web applications.
Port: 80 (HTTP), 443 (HTTPS)
# docker pull linuxserver/heimdall
# docker run -d \
#   --name=heimdall \
#   -p 80:80 \
#   -p 443:443 \
#   -v <path_to_config>:/config \
#   -e PUID=1000 \
#   -e PGID=1000 \
#   -e TZ=Etc/UTC \
#   linuxserver/heimdall
Options: None specifically common beyond standard Docker options.

Name: BookStack
Description: A simple, self-hosted, easy-to-use platform for organizing and storing information, like a wiki or documentation. (Requires a database container)
Port: 80 (or 443 via reverse proxy)
# docker pull lscr.io/linuxserver/bookstack
# docker run -d \
#   --name=bookstack \
#   -p 80:80 \
#   -e PUID=1000 \
#   -e PGID=1000 \
#   -e TZ=Etc/UTC \
#   -e APP_URL=<your_app_url> \
#   -v <path_to_config>:/config \
#   # ... database connection environment variables ...
#   lscr.io/linuxserver/bookstack
Options: APP_URL, plus various database connection options.

Name: Wiki.js
Description: A modern, powerful, and flexible wiki engine. (Requires a database container)
Port: 3000
# docker pull ghcr.io/requarks/wiki.js
# docker run -d \
#   --name=wikijs \
#   -p 3000:3000 \
#   -e WIKIJS_PORT=3000 \
#   -v <path_to_config>:/opt/wikijs/data \
#   # ... database connection environment variables ...
#   ghcr.io/requarks/wiki.js
Options: WIKIJS_PORT, plus various database connection options.

Name: Trilium Notes
Description: A hierarchical note-taking application with a web interface.
Port: 8080
# docker pull zadam/trilium
# docker run -d \
#   --name=trilium \
#   -p 8080:8080 \
#   -v <path_to_data>:/home/node/trilium-data \
#   zadam/trilium
Options: None specifically common beyond standard Docker options.

Name: Rocket.Chat
Description: A free open-source team communication platform (Slack alternative). (Requires a MongoDB replica set)
Port: 3000
# docker pull rocketchat/rocket.chat
# docker run -d \
#   --name=rocketchat \
#   -p 3000:3000 \
#   -e ROOT_URL=http://localhost:3000 \
#   -e MONGO_URL=mongodb://<mongodb_host>:<mongodb_port>/rocketchat?replicaSet=rs0 \
#   # ... other environment variables for scaling, etc. ...
#   rocketchat/rocket.chat
Options: ROOT_URL, MONGO_URL, and many others for configuration.

Name: Mattermost
Description: A self-hosted online chat service designed as an open-source Slack alternative. (Requires a database container)
Port: 8065
# docker pull mattermost/mattermost-team-edition
# docker run -d \
#   --name=mattermost \
#   -p 8065:8065 \
#   -v <path_to_data>:/mattermost/data \
#   -v <path_to_config>:/mattermost/config \
#   -v <path_to_logs>:/mattermost/logs \
#   # ... database connection environment variables ...
#   mattermost/mattermost-team-edition
Options: Various environment variables for database connection and application settings.

Name: Vaultwarden (Bitwarden_rs)
Description: An unofficial, open-source server written in Rust, compatible with upstream Bitwarden clients.
Port: 80 (or 443 via reverse proxy)
# docker pull vaultwarden/server
# docker run -d \
#   --name=vaultwarden \
#   -p 80:80 \
#   -v <path_to_data>:/data \
#   -e TZ=Etc/UTC \
#   -e SIGNUPS_ALLOWED=false `# Optional: Disable new user signups` \
#   vaultwarden/server
Options: SIGNUPS_ALLOWED, ADMIN_TOKEN, and many others for configuration.

Name: Gitea
Description: A painless, self-hosted Git service. (Can use SQLite or connect to external DB)
Port: 3000 (HTTP), 22 (SSH - often mapped to a different host port)
# docker pull gitea/gitea
# docker run -d \
#   --name=gitea \
#   -p 3000:3000 \
#   -p 2222:22 `# Map SSH to host port 2222 to avoid conflict` \
#   -v <path_to_data>:/data \
#   -e USER_UID=1000 \
#   -e USER_GID=1000 \
#   gitea/gitea
Options: USER_UID, USER_GID, and various database connection options.

Name: Actual Budget
Description: A free, open-source, privacy-focused budget manager.
Port: 5006
# docker pull actualbudget/actual-server
# docker run -d \
#   --name=actualbudget \
#   -p 5006:5000 `# Note: Container port is 5000, map to host port 5006 commonly` \
#   -v <path_to_data>:/data \
#   actualbudget/actual-server
Options: None specifically common beyond standard Docker options.

Name: Firefly III
Description: A financial planning and analysis tool to help you manage your personal finances. (Requires a database container)
Port: 8080
# docker pull fireflyiii/core
# docker run -d \
#   --name=fireflyiii \
#   -p 8080:8080 \
#   -v <path_to_upload>:/var/www/html/storage/upload \
#   # ... database connection environment variables ...
#   fireflyiii/core
Options: Various environment variables for database connection and application settings.

Name: Grocy
Description: A ERP beyond your fridge - household management, including groceries, chores, and cooking. (Can use SQLite or connect to external DB)
Port: 80 (or 443 via reverse proxy)
# docker pull ghcr.io/grocy/grocy
# docker run -d \
#   --name=grocy \
#   -p 80:80 \
#   -v <path_to_config>:/config \
#   -e PUID=1000 \
#   -e PGID=1000 \
#   -e TZ=Etc/UTC \
#   ghcr.io/grocy/grocy
Options: None specifically common beyond standard Docker options.

Name: Mealie
Description: A self-hosted recipe manager with a modern web UI. (Requires a database container)
Port: 9000
# docker pull hkotel/mealie
# docker run -d \
#   --name=mealie \
#   -p 9000:80 \
#   -v <path_to_data>:/app/data \
#   -e PUID=1000 \
#   -e PGID=1000 \
#   -e TZ=Etc/UTC \
#   # ... database connection environment variables ...
#   hkotel/mealie
Options: Various environment variables for database connection and application settings.

Name: Uptime Kuma
Description: A self-hosted monitoring tool like "Uptime Robot".
Port: 3001
# docker pull louislam/uptime-kuma
# docker run -d \
#   --name=uptime-kuma \
#   -p 3001:3001 \
#   -v <path_to_data>:/app/data \
#   louislam/uptime-kuma
Options: None specifically common beyond standard Docker options.

Name: Speedtest Tracker
Description: Automatically track your internet speed over time and visualize it. (Requires a database container)
Port: 80 (or 443 via reverse proxy)
# docker pull ghcr.io/alexjustesen/speedtest-tracker
# docker run -d \
#   --name=speedtest-tracker \
#   -p 80:80 \
#   -v <path_to_config>:/config \
#   # ... database connection environment variables ...
#   ghcr.io/alexjustesen/speedtest-tracker
Options: Various environment variables for database connection and application settings.

Name: FileBrowser
Description: A lightweight, web-based file browser.
Port: 8080
# docker pull filebrowser/filebrowser
# docker run -d \
#   --name=filebrowser \
#   -p 8080:8080 \
#   -v <path_to_config>:/config \
#   -v <path_to_data>:/data \
#   filebrowser/filebrowser
Options: None specifically common beyond standard Docker options.

Name: MiniIO
Description: An S3 compatible object storage server.
Port: 9000 (API), 9001 (Console)
# docker pull minio/minio
# docker run -d \
#   --name minio \
#   -p 9000:9000 \
#   -p 9001:9001 \
#   -v <path_to_data>:/data \
#   -v <path_to_config>:/root/.minio \
#   minio/minio server /data --console-address ":9001"
Options: server, /data, --console-address (part of the container's command)

Name: Calibre-Web
Description: A web app providing a clean interface to browse, read, and download ebooks from a Calibre library.
Port: 8083
# docker pull linuxserver/calibre-web
# docker run -d \
#   --name=calibre-web \
#   -p 8083:8083 \
#   -v <path_to_config>:/config \
#   -v <path_to_calibre_library>:/books \
#   -e PUID=1000 \
#   -e PGID=1000 \
#   -e TZ=Etc/UTC \
#   linuxserver/calibre-web
Options: None specifically common beyond standard Docker options.

Name: Komga
Description: A free and open source comic/manga/webtoon server. (Requires a database container)
Port: 25600
# docker pull ghcr.io/komga/komga
# docker run -d \
#   --name=komga \
#   -p 25600:25600 \
#   -v <path_to_config>:/config \
#   -v <path_to_data>:/data \
#   -v <path_to_comics>:/comics \
#   ghcr.io/komga/komga
Options: None specifically common beyond standard Docker options.

Name: Stirling-PDF
Description: A web-based toolset for manipulating PDF files (split, merge, convert, etc.).
Port: 8080
# docker pull stirlingdev/stirling-pdf
# docker run -d \
#   --name=stirling-pdf \
#   -p 8080:8080 \
#   stirlingdev/stirling-pdf
Options: None specifically common beyond standard Docker options.

Name: Whoogle Search
Description: A self-hosted, privacy-respecting metasearch engine.
Port: 5000
# docker pull ghcr.io/benbusby/whoogle-search
# docker run -d \
#   --name=whoogle-search \
#   -p 5000:5000 \
#   -e WHOOGLE_CONFIG=/app/config.cfg `# Optional: Path to a custom config file` \
#   ghcr.io/benbusby/whoogle-search
Options: WHOOGLE_CONFIG

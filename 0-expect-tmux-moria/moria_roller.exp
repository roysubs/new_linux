#!/usr/bin/expect -f
# Ensure the tmux session is set up and Moria is at the rolling screen before running.
# Start session with 'tmux new -s moria_session'.
# Start moria and get to the character stat rolling screen.
# C-b d (detach from session).
# After Expect completes, 'tmux attach' to return to the session.
#
# To watch the progress within tmux:
# To see a snapshot of the tmux session:      tmux capture-pane -t moria_session -p
# To attach view-only and watch the rolling:  tmux attach -t moria_session
# Or, to start with split-window view output: tmux split-window -t moria_session

# Set up the log file
set script_name [file tail [info script]]
set log_file [file rootname $script_name].log
set log_path [file join [pwd] $log_file]

# Attach to the tmux session and send the initial keypress
exec tmux send-keys -t moria_session " " C-m

# Get a timestamp in the required format
proc timestamp {} {
    set now [clock seconds]
    set millis [expr {[clock milliseconds] % 1000}]
    return [format "%s_%03d" [clock format $now -format "%Y-%m-%d_%H-%M-%S"] $millis]
}

# Function to log messages
proc log_message {log_path message} {
    catch {
        set log_file [open $log_path "a"]
        puts $log_file $message
        close $log_file
    } err
    if {$err != ""} {
        send_user "Error writing to log file: $err\n"
    }
}

# Function to capture pane output and reroll
proc reroll {log_path failed_attempts} {
    # Capture the current tmux pane output
    set pane_output [exec tmux capture-pane -t moria_session -p]

    # Debug: Log the raw pane output
    # log_message $log_path "[timestamp] Raw Pane Output:\n$pane_output\n"

    # Extract the INT value if present
    if {[regexp {INT\s+:\s+18\/([0-9]{2})} $pane_output match int_value]} {
        # Log the timestamp and INT value
        set log_entry "[timestamp] INT=18/$int_value\n"
        log_message $log_path $log_entry

        # Convert the extracted value to a number and check if it's >= 19
        set int_value_num [expr {[scan $int_value %d]}]
        if {$int_value_num >= 19} {
            send_user "Value of '18/$int_value' found. Stopping.\n"
            return 1  ;# Indicating success
        }

        # # Convert the extracted value to a number and check if it's >= 19
        # set int_value_num [expr {$int_value + 0}]
        # if {$int_value_num >= 19} {
        #     send_user "Value of '18/$int_value' found. Stopping.\n"
        #     return 1  ;# Indicating success
        # }
    } else {
        # Log if no INT value is found
        log_message $log_path "[timestamp] No valid INT found in this roll.\n"
    }

    # If not found, send space to reroll
    log_message $log_path "[timestamp] Sending space key to tmux."
    exec tmux send-keys -t moria_session " " C-m

    # Increment the failed attempts counter
    return $failed_attempts
}

# Initialize counters for failed attempts and start time
set failed_attempts 0
set start_time [clock seconds]

# Loop to keep rerolling until the desired stat is found
while {1} {
    set failed_attempts [reroll $log_path $failed_attempts]
    if {$failed_attempts == 1} {
        # Stop the loop if the value is found
        break
    }
    # Small delay to allow Moria to render the new roll
    sleep 0.3
}

# Calculate the time taken in minutes and seconds
set elapsed_time [expr {[clock seconds] - $start_time}]
set minutes [expr {$elapsed_time / 60}]
set seconds [expr {$elapsed_time % 60}]

# Final output
send_user "\nStopped at INT value of '18/19' found\n"
send_user "Failed attempts: $failed_attempts, took $minutes min $seconds sec.\n"

